{
  "openapi": "3.0.1",
  "info": {
    "title": "API Documentation",
    "description": "API Documentation for Redem 3.0",
    "version": "1.0.0",
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "url": "https://api.redem.io/"
    }
  ],
  "security": [
    {
      "apiKeyAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key"
      }
    },
    "schemas": {
      "InterviewData": {
        "description": "Structure for interview-based questions",
        "type": "object",
        "required": [
          "question",
          "answer"
        ],
        "properties": {
          "question": {
            "type": "string",
            "description": "**Contains the title or text of the question**.",
            "example": "What type of accommodation did you stay in?"
          },
          "answer": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "description": "A variable that stores the **respondentâ€™s answer to the question**.",
            "example": "Hotel"
          }
        }
      },
      "InteractionData": {
        "description": "This variable compiles all relevant information about the interaction of the respondent with the data point. \n\n ðŸ”¦ **Tip:** Need a template to extract keystroke patterns directly from individual browsers? Contact us at [support@redem.io](mailto:support@redem.io)", 
        "type": "object",
        "required": ["value", "interactionType", "timestamp"],
        "properties": {
          "interactionType": { 
            "type": "string",
            "description": "The type of interaction the respondent had with the data point. \n\n â­• **Note:** Currently, the API supports `KEYSTROKE` and `COPY_AND_PASTE` interactions. Future updates will extend support to additional interactions, such as **mouse clicks, mouse movements**, and more.",
            "enum": ["KEYSTROKE", "COPY_AND_PASTE"]
          },
          "value": { 
            "type": "string",
            "description": "The value of the interaction, which should include the final value once the interaction is complete."
          },
          "timestamp": { 
            "type": "string",
            "description": "The timestamp of the interaction. The timestamp is in the format `YYYY-MM-DDTHH:MM:SS.SSSZ`."
          }
        }
      },
      "DataPoint": {
        "description": "An array of data points used to perform quality checks on each respondent.",
        "type": "object",
        "discriminator": {
          "propertyName": "qualityCheck",
          "mapping": {
            "OES": "#/components/schemas/OESDataPoint",
            "TS": "#/components/schemas/TSDataPoint", 
            "GQS": "#/components/schemas/GQSDataPoint",
            "CHS": "#/components/schemas/CHSDataPoint",
            "BAS": "#/components/schemas/BASDataPoint"
          }
        },
        "oneOf": [
          { "$ref": "#/components/schemas/OESDataPoint" },
          { "$ref": "#/components/schemas/TSDataPoint" },
          { "$ref": "#/components/schemas/GQSDataPoint" },
          { "$ref": "#/components/schemas/CHSDataPoint" },
          { "$ref": "#/components/schemas/BASDataPoint" }
        ]
      },
      "OESDataPoint": {
        "type": "object",
        "title": "OES",
        "properties": {
          "qualityCheck": {
            "type": "string",
            "description": "A variable that **specifies the type of quality check applied to the data point**, determining how it will be assessed and evaluated.",
            "enum": ["OES"]
          },
          "dataPointId": {
            "type": "string",
            "x-mintlify-id": "oes-data-point-id",
            "description": "**A unique identifier assigned to each data point**, allowing users to pick a customized name. This name will be used to identify and reference the data point later within the system.",
            "example": "Q1"
          },
          "question": {
            "type": "string",
            "description": "**Contains the title or text of the open-ended question**, which is used directly to evaluate respondent quality.  \n\n This variable is required only when the quality check type is set to `OES`. For all other quality check types, it will be ignored, even if provided. \n\n ðŸ§ª **Validations:**  \n - The question must not exceed **250 characters**.",
            "example": "Where did you spend your last vacation?"
          },
          "answer": {
            "type": "string",
            "description": "A variable that holds the **respondent's answer to an open-ended question**, which is the main part we use for evaluation. \n\n This variable is required only when the quality check type is set to `OES`. For all other quality check types, it will be ignored, even if provided.",
            "example": "We were at Lake Garda in Italy"
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "**Keywords are used to perform `wrong topic` checks** and help evaluate whether responses are relevant to the topic. \n\nThe wrong topic check is always enabled. If no keywords are provided, the system uses the question title for evaluation. When keywords are provided, they enhance the context and improve the accuracy of the check. \n\n For more details on how this works, refer to the [Wrong Topic Check](/quality-checks/open-ended-score#wrong-topic) section. \n\n ðŸ§ª **Validations:**  \n - A **maximum of 10** keywords are allowed for each question.",
            "example": ["Beach", "Mountains", "Lake"]
          },
          "activateDuplicateDetection": {
            "type": "boolean",
            "description": "A variable that indicates **whether duplicate checks are performed on the respondent's answers**. \n\n This checks if an answer is identical to another respondent's answer or if a respondent provided the same answer to multiple questions. \n\n By default, duplicate checks are active, but you can deactivate them by setting this variable to `false`. \n\n For more details on how this works, refer to the [Duplicate Check](/quality-checks/open-ended-score#duplicate-respondent) section.",
            "example": true,
            "default": true
          },
          "allowedLanguages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "**Specifies the list of languages allowed for responses**. Answers provided in languages not on this list will be marked as `wrong language`. The specified languages are respondent-based.\n\n If no languages are specified, the wrong language check will not be performed. \n\n **ðŸ”¦ Tip:** To ensure accurate language detection, set the expected language to the one the respondent used to complete the questionnaire. \n\n For more details on how this works, refer to the [Wrong Language Check](/quality-checks/open-ended-score#wrong-language) section. \n\n ðŸ§ª **Validations:**  \n - Allowed languages should be represented using **two-letter ISO 639-1 language codes.**",
            "example": ["en", "de", "it"]
          }
        },
        "required": ["dataPointId", "qualityCheck", "answer", "question"]
      },
      "TSDataPoint": {
        "type": "object",
        "title": "TS",
        "properties": {
          "qualityCheck": {
            "type": "string",
            "description": "A variable that **specifies the type of quality check applied to the data point**, determining how it will be assessed and evaluated.",
            "enum": ["TS"]
          },
          "dataPointId": {
            "type": "string",
            "description": "**A unique identifier assigned to each data point**, allowing users to pick a customized name. This name will be used to identify and reference the data point later within the system.",
            "example": "Q1"
          },
          "duration": {
            "type": "number",
            "description": "This variable captures the **time a respondent has spent on a question or a specific section of the survey**. The duration can be provided in seconds or milliseconds. \n\n **ðŸ’¬ Recommendation:** Send the duration for each question rather than the total survey duration to ensure more accurate analysis.",
            "example": 42670
          }
        },
        "required": ["dataPointId", "qualityCheck", "duration"]
      },
      "GQSDataPoint": {
        "type": "object",
        "title": "GQS",
        "properties": {
          "qualityCheck": {
            "type": "string",
            "description": "A variable that **specifies the type of quality check applied to the data point**, determining how it will be assessed and evaluated.",
            "enum": ["GQS"]
          },
          "dataPointId": {
            "type": "string",
            "description": "**A unique identifier assigned to each data point**, allowing users to pick a customized name. This name will be used to identify and reference the data point later within the system.",
            "example": "Q1"
          },
          "gridAnswersPattern": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "A variable that contains all the **answers provided by a specific respondent for a particular grid question**. \n\n The grid pattern should be sent in the same order as the respondent saw it in the survey, especially for randomized grid questions, to ensure accurate analysis. \n\n ðŸ§ª **Validations:**  \n - A **minimum of 7** and a **maximum of 50** answers are allowed for each grid question. \n - Each answer must be provided as a **numeric value**.",
            "example": [5, 4, 3, 5, 4]
          }
        },
        "required": ["dataPointId", "qualityCheck", "gridAnswersPattern"]
      },
      "CHSDataPoint": {
        "type": "object",
        "title": "CHS",
        "properties": {
          "qualityCheck": {
            "type": "string",
            "description": "A variable that **specifies the type of quality check applied to the data point**, determining how it will be assessed and evaluated.",
            "enum": ["CHS"]
          },
          "dataPointId": {
            "type": "string",
            "description": "**A unique identifier assigned to each data point**, allowing users to pick a customized name. This name will be used to identify and reference the data point later within the system. Note that there can be only one CHS datapoint per respondent. This datapoint should contain the entire interview.",
            "example": "CHS_DataPoint"
          },
          "interviewData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterviewData"
            },
            "description": "This variable aggregates all relevant question-answer pairs used to evaluate the respondentâ€™s coherence. \n\n ðŸ§ª **Validations:**  \n - A **maximum of 1000** question/answer pairs are allowed per respondent.",
            "example": [{
              "question": "What type of accommodation did you stay in?",
              "answer": "Hotel"
            }]
          }
        },
        "required": ["dataPointId", "qualityCheck", "interviewData"]
      },
      "BASDataPoint": {
        "type": "object",
        "title": "BAS",
        "properties": {
          "qualityCheck": {
            "type": "string",
            "description": "A variable that **specifies the type of quality check applied to the data point**, determining how it will be assessed and evaluated.",
            "enum": ["BAS"]
          },
          "dataPointId": {
            "type": "string",
            "description": "**A unique identifier assigned to each data point**, allowing users to pick a customized name. This name will be used to identify and reference the data point later within the system.",
            "example": "Q1"
          },
          "interactionData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InteractionData"
            },
            "description": "This variable compiles all relevant information about the interaction of the respondent with the data point. \n\n ðŸ”¦ **Tip:** Need a template to extract keystroke patterns directly from individual browsers? Contact us at [support@redem.io](mailto:support@redem.io)",
            "example": [{
              "interactionType": "KEYSTROKE",
              "value": "W",
              "timestamp": "2024-12-01T06:22:59.833Z"
            }]
          }
        },
        "required": ["dataPointId", "qualityCheck", "interactionData"]
      },
      "AddRespondentRequest": {
        "description": "Request body for adding a new respondent",
        "required": [
          "respondentId",
          "surveyName",
          "dataPoints"
        ],
        "type": "object",
        "properties": {
          "respondentId": {
            "type": "string",
            "description": "**The unique identifier for a respondent**, making it easy to distinguish them from others in the survey. The respondent ID can be freely chosen for flexibility.\n\n**ðŸ’¡ Important:** The system utilizes this ID, combined with the survey name, to uniquely identify the respondent within a survey. This allows the same respondent ID to participate in multiple surveys without conflicts. \n\nIf the combination of survey name and respondent ID already exists, an error will be displayed. \n\n **ðŸ”¦ Tip:** You can use the same respondent ID as in the survey tool to easily identify the respondent later.",
            "example": "RESP497770"
          },
          "surveyName": {
            "type": "string",
            "description": "**The name of the survery**, which helps identify different surveys. The survey name can be assigned freely. \n\n**ðŸ’¡Important:** If the survey name already exists, the system will add the respondent under the appropriate survey. If the survey name is new, a new survey will be created, and the respondent will be added to the new survey. \n\n **â­• Note:** Each survey identifier must be unique. \n\n **ðŸ”¦ Tip:** you can simply make survey name unique by adding a timestamp. \n As Example: `Global Vacation Insights - 1709040600`"
          },
          "dataPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataPoint"
            },
            "description": "An array of data points used for quality checks on each respondent. For the Coherence Score (CHS), only a single data point is allowed, which must contain the entire interview.\n\n ðŸ§ª **Validations:** \n - A **maximum of 10** `OES` data points are allowed per respondent. \n - A **maximum of 100** `TS` data points are allowed per respondent. \n - A **maximum of 20** `GQS` data points are allowed per respondent. \n - A **maximum of 1 with 1000 question/answer pairs** `CHS` data point is allowed per respondent. \n\n Exceeding these limits will trigger validation errors. Ensure that the number of data points per respondent remains within the allowed limits."
          },
          "activateCleaning": {
            "type": "boolean",
            "description": "**Indicates whether cleaning should be applied to the respondent**. \n\n **ðŸ’¡Important:** To get an indicator whether respondents should be removed from the sample, ensure this variable is set to true. \n\n When cleaning is enabled, the response will include the variable isExcluded, which indicates whether the respondent has been excluded based on the applied criteria.",
            "example": true,
            "default": false
          },
          "cleaningSettings": {
            "description": "Cleaning settings define the rules for determining whether a respondent should be excluded and marked as low quality. If a **respondentâ€™s scores fall below the threshold, they will be excluded and flagged as low quality**.\n\n **ðŸ’¡Important:** If no custom cleaning settings are defined and cleaning is enabled, the system will apply ReDemâ€™s recommended cleaning settings. You can view the recommended settings here: [ReDem Recommended Cleaning Settings](/features/cleaning-and-review#redem-recommended-cleaning-settings) \n \n For more details on how cleaning works, refer to the [Data Cleaning](/features/cleaning-and-review) section.",
            "$ref": "#/components/schemas/CleaningSettings"
          },
          "synchronousResponse": {
            "type": "boolean",
            "description": "**Indicates whether the response should be processed synchronously**. \n\n - Set to `true` if you need an immediate response. \n - Set to false if you donâ€™t need to wait; you can later check the respondentâ€™s status using the [Get Respondent Status endpoint](/api-reference/endpoint/getRespondentStatus).",
            "example": true,
            "default": true
          }
        }
      },
      "DataPointsQualityResponse": {
        "description": "Quality check results for a single datapoint",
        "type": "object",
        "properties": {
          "qualityCheck": {
            "type": "string",
            "enum": [
              "OES",
              "TS",
              "GQS",
              "CHS",
              "BAS"
            ],
            "description": "**Type of quality check** performed for the data point",
            "example": "OES"
          },
          "dataPointId": {
            "type": "string",
            "description": "**A unique identifier of the data point**",
            "example": "Q1"
          },
          "score": {
            "type": "number",
            "description": "**Quality score for the data point**, ranging from 0 to 100",
            "example": 85
          },
          "category": {
            "type": "string",
            "description": "**Quality category** for the data point, this will be only available if the quality check type is set to `OES` or `BAS`",
            "example": "VALID_ANSWER"
          },
          "reason": {
            "type": "string",
            "description": "**Explanation** for the score, this will be only available if the quality check type is set to `GQS`",
            "example": "Straightliner, Partial Straightliner"
          }
        }
      },
      "QualityCheckResponse": {
        "description": "Aggregated results for a quality score type",
        "type": "object",
        "properties": {
          "qualityCheck": {
            "type": "string",
            "enum": [
              "OES",
              "TS",
              "GQS",
              "CHS",
              "BAS"
            ],
            "description": "**The specific type of quality check** applied to a respondent.",
            "example": "OES"
          },
          "score": {
            "type": "number",
            "description": "A **numerical score from 0 to 100** that represents the overall result of a specific quality check. It is calculated based on the combined evaluation of all data point scores of the same quality type.",
            "example": 78
          },
          "reason": {
            "type": "string",
            "description": "**The reason behind the score** â€” available only when the quality score type is set to `CHS`.",
            "example": "The user shows several inconsistencies and contradictions, such as different ..."
          },
          "incoherentQuestions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "**List of incoherent questions** identified during the CHS quality check. This will be only available if the quality score type is set to `CHS` \n\n **â­• Note:** The questions are named in numerical order, reflecting the sequence in which they were presented to the respondent.",
            "example": ["Q1", "Q2"]
          }
        }
      },
      "RespondentResults": {
        "description": "Complete quality assessment for a respondent",
        "type": "object",
        "properties": {
          "isExcluded": {
            "type": "boolean",
            "description": "**Indicates whether a respondent is excluded based on the cleaning settings specified in the request**. If cleaning is not activated, the respondent is always included by default.",
            "example": false
          },
          "reasonsForExclusion": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "**Reasons for exclusion** will only be available if the respondent is excluded based on the cleaning settings specified in the request. If the respondent is not excluded, the array will be empty."
          },
          "redemScore": {
            "type": "number",
            "description": "**A weighted average score** (0â€“100) calculated based on the applied quality scores.. \n\n For more information refer to the [ReDem Score](/quality-checks/redem-score) section.",
            "example": 85
          },
          "qualityScoreSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QualityCheckResponse"
            },
            "description": "An object containing detailed results for each quality score applied"
          },
          "dataPointsSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataPointsQualityResponse"
            },
            "description": "Detailed results of quality checks performed at the individual data point level."
          }
        }
      },
      "AddSurveyRequest": {
        "description": "Request body for creating or customizing a survey",
        "required": [
          "surveyName",
          "cleaningSettings",
          "reviewSettings"
        ],
        "type": "object",
        "properties": {
          "projectName": {
            "type": "string",
            "description": "Optional survey name for grouping surveys",
            "example": "customer-satisfaction-2024"
          },
          "surveyName": {
            "type": "string",
            "description": "Unique identifier for the survey",
            "example": "customer-survey-2024"
          },
          "cleaningSettings": {
            "$ref": "#/components/schemas/CleaningSettings",
            "example": {
              "ReDemSettings": true,
              "CustomSettings": {
                "redemScore": 80,
                "qualityChecks": [
                  {
                    "type": "OES",
                    "score": 70,
                    "minimumAnswers": 5
                  }
                ]
              }
            }
          },
          "reviewSettings": {
            "$ref": "#/components/schemas/CleaningSettings",
            "example": {
              "ReDemSettings": false,
              "OESCategories": {
                "validAnswers": true,
                "genericAnswers": true,
                "noInformation": true
              }
            }
          }
        }
      },
      "CleaningSettings": {
        "description": "Configuration for data cleaning and review process",
        "type": "object",
        "properties": {
          "redemScore": {
            "type": "number",
            "description": "Minimum acceptable ReDem score (0-100)",
            "example": 60
          },
          "OES": {
            "type": "object",
            "properties": {
              "activate": {
                "type": "boolean",
                "description": "Indicates whether **OES** should be applied as a cleaning parameter.",
                "example": true
              },
              "score": {
                "type": "number",
                "description": "Minimum score threshold for OES checks",
                "example": 40
              },
              "minDataPoints": {
                "type": "number",
                "description": "Minimum number of data points required",
                "example": 2
              },
              "categories": {
                "type": "object",
                "properties": {
                  "GENERIC_ANSWER": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "NO_INFORMATION": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "BAD_LANGUAGE": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "NONSENSE": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "DUPLICATE_ANSWER": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "DUPLICATE_RESPONDENT": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "WRONG_TOPIC": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "WRONG_LANGUAGE": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "AI_GENERATED_ANSWER": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  }
                }
              }
            }
          },
          "CHS": {
            "type": "object",
            "properties": {
              "activate": {
                "type": "boolean",
                "description": "Indicates whether **CHS** should be applied as a cleaning parameter.",
                "example": true
              },
              "score": {
                "type": "number",
                "description": "Minimum score threshold for CHS checks",
                "example": 30
              }
            }
          },
          "GQS": {
            "type": "object",
            "properties": {
              "activate": {
                "type": "boolean",
                "description": "Indicates whether **GQS** should be applied as a cleaning parameter.",
                "example": true
              },
              "score": {
                "type": "number",
                "description": "Minimum score threshold for GQS checks",
                "example": 20
              },
              "minDataPoints": {
                "type": "number",
                "description": "Minimum number of data points required",
                "example": 2
              }
            }
          },
          "TS": {
            "type": "object",
            "properties": {
              "activate": {
                "type": "boolean",
                "description": "Indicates whether **TS** should be applied as a cleaning parameter.",
                "example": true
              },
              "score": {
                "type": "number",
                "description": "Minimum score threshold for TS checks",
                "example": 20
              }
            }
          },
          "BAS": {
            "type": "object",
            "properties": {
              "activate": {
                "type": "boolean",
                "description": "Indicates whether **BAS** should be applied as a cleaning parameter.",
                "example": true
              },
              "score": {
                "type": "number",
                "description": "Minimum score threshold for BAS checks",
                "example": 20
              },
              "categories": {
                "type": "object",
                "properties": {
                  "UNNATURAL_TYPING": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "COPY_AND_PASTE": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "CreditCalculationRequest": {
        "description": "Request body for calculating the maximum number of credits needed for a respondent",
        "required": [
          "OESDataPoints",
          "GQSAnswers",
          "TSDataPoints",
          "CHSAnswers",
          "BASDataPoints"
        ],
        "type": "object",
        "properties": {
          "OESDataPoints": {
            "type": "number",
            "description": "**The number of data points** to be used for the Open-Ended Score (OES). \n **â­• Note:** If no OES data points are available, this value can be set to `0`."
          },
          "GQSAnswers": {
            "type": "number",
            "description": "**The number of data points** to be used for the Grid-Question Score (GQS). \n **â­• Note:** If no GQS answers are available, this value can be set to `0`."
          },
          "TSDataPoints": {
            "type": "number",
            "description": "**The number of data points** to be used for the Time Score (TS). \n **â­• Note:** If no TS data points are available, this value can be set to `0`."
          },
          "CHSAnswers": {
            "type": "number",
            "description": "**The number of data points** to be used for the Coherence Score (CHS). \n **â­• Note:** If no CHS answers are available, this value can be set to `0`."
          },
          "BASDataPoints": {
            "type": "number",
            "description": "**The number of data points** to be used for the Behavioral-Analytics Score (BAS). \n **â­• Note:** If no BAS data points are available, this value can be set to `0`."
          }
        }
      },
      "CalculationBreakdown": {
        "description": "Detailed breakdown of the number of credits estimated for a respondent",
        "type": "object",
        "properties": {
          "OES": {
            "type": "object",
            "description": "Detailed breakdown of the number of OES credits estimated for a respondent",
            "properties": {
              "credits": {
                "type": "number",
                "description": "Number of OES credits estimated for a respondent"
              },
              "dataPoints": {
                "type": "number",
                "description": "Number of OES data points estimated for a respondent"
              }
            }
          },
          "GQS": {
            "type": "object",
            "description": "Detailed breakdown of the number of GQS credits estimated for a respondent",
            "properties": {
              "credits": {
                "type": "number",
                "description": "Number of GQS credits estimated for a respondent"
              },
              "answers": {
                "type": "number",
                "description": "Number of GQS answers estimated for a respondent"
              }
            }
          },
          "TS": {
            "type": "object",
            "description": "Detailed breakdown of the number of TS credits estimated for a respondent",
            "properties": {
              "credits": {
                "type": "number",
                "description": "Number of TS credits estimated for a respondent"
              },
              "dataPoints": {
                "type": "number",
                "description": "Number of TS data points estimated for a respondent"
              }
            }
          },
          "CHS": {
            "type": "object",
            "description": "Detailed breakdown of the number of CHS credits estimated for a respondent",
            "properties": {
              "credits": {
                "type": "number",
                "description": "Number of CHS credits estimated for a respondent"
              },
              "answers": {
                "type": "number",
                "description": "Number of CHS interviews estimated for a respondent"
              }
            }
          },
          "BAS": {
            "type": "object",
            "description": "Detailed breakdown of the number of BAS credits estimated for a respondent",
            "properties": {
              "credits": {
                "type": "number",
                "description": "Number of BAS credits estimated for a respondent"
              },
              "answers": {
                "type": "number",
                "description": "Number of BAS data points estimated for a respondent"
              }
            }
          }
        }
      },
      "GetRespondentRequest": {
        "description": "Request body for getting a respondent",
        "required": [
          "surveyName",
          "respondentId"
        ],
        "type": "object",
        "properties": {
          "surveyName": {
            "type": "string",
            "description": "**The name of the survery**.",
            "example": "Global Vacation Insights 2024"
          },
          "respondentId": {
            "type": "string",
            "description": "**The unique identifier for a respondent**, making it easy to distinguish them from others in the survey",
            "example": "RESP497770"
          }
        }
      },
      "GetAllRespondentsRequest": {
        "description": "Request body for getting all respondents",
        "required": [
          "surveyName"
        ],
        "type": "object",
        "properties": {
          "surveyName": {
            "type": "string",
            "description": "**The name of the survey**."
          }
        }
      },
      "AddRespondentRequest_v2": {
        "description": "Request body for adding a new respondent",
        "required": [
          "respondentId",
          "surveyName",
          "dataPoints"
        ],
        "type": "object",
        "properties": {
          "respondentId": {
            "type": "string",
            "description": "**The unique identifier for a respondent**, making it easy to distinguish them from others in the survey. The respondent ID can be freely chosen for flexibility.\n\n**ðŸ’¡ Important:** The system utilizes this ID, combined with the survey name, to uniquely identify the respondent within a survey. This allows the same respondent ID to participate in multiple surveys without conflicts. \n\nIf the combination of survey name and respondent ID already exists, an error will be displayed. \n\n **ðŸ”¦ Tip:** You can use the same respondent ID as in the survey tool to easily identify the respondent later.",
            "example": "RESP497770"
          },
          "surveyName": {
            "type": "string",
            "description": "**The name of the survery**, which helps identify different surveys. The survey name can be assigned freely. \n\n**ðŸ’¡Important:** If the survey name already exists, the system will add the respondent under the appropriate survey. If the survey name is new, a new survey will be created, and the respondent will be added to the new survey. \n\n **â­• Note:** Each survey identifier must be unique. \n\n **ðŸ”¦ Tip:** you can simply make survey name unique by adding a timestamp. \n As Example: `Global Vacation Insights - 1709040600`"
          },
          "dataPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataPoint_v2"
            },
            "description": "An array of data points used for quality checks on each respondent. For the Coherence Score (CHS), only a single data point is allowed, which must contain the entire interview.\n\n ðŸ§ª **Validations:** \n - A **maximum of 10** `OES` data points are allowed per respondent. \n - A **maximum of 100** `TS` data points are allowed per respondent. \n - A **maximum of 20** `GQS` data points are allowed per respondent. \n - A **maximum of 1 with 1000 question/answer pairs** `CHS` data point is allowed per respondent. \n\n Exceeding these limits will trigger validation errors. Ensure that the number of data points per respondent remains within the allowed limits."
          },
          "activateCleaning": {
            "type": "boolean",
            "description": "**Indicates whether cleaning should be applied to the respondent**. \n\n **ðŸ’¡Important:** To get an indicator whether respondents should be removed from the sample, ensure this variable is set to true. \n\n When cleaning is enabled, the response will include the variable isExcluded, which indicates whether the respondent has been excluded based on the applied criteria.",
            "example": true,
            "default": false
          },
          "cleaningSettings": {
            "description": "Cleaning settings define the rules for determining whether a respondent should be excluded and marked as low quality. If a **respondentâ€™s scores fall below the threshold, they will be excluded and flagged as low quality**.\n\n **ðŸ’¡Important:** If no custom cleaning settings are defined and cleaning is enabled, the system will apply ReDemâ€™s recommended cleaning settings. You can view the recommended settings here: [ReDem Recommended Cleaning Settings](/features/cleaning-and-review#redem-recommended-cleaning-settings) \n \n For more details on how cleaning works, refer to the [Data Cleaning](/features/cleaning-and-review) section.",
            "$ref": "#/components/schemas/CleaningSettings"
          },
          "synchronousResponse": {
            "type": "boolean",
            "description": "**Indicates whether the response should be processed synchronously**. \n\n - Set to `true` if you need an immediate response. \n - Set to false if you donâ€™t need to wait; you can later check the respondentâ€™s status using the [Get Respondent Status endpoint](/api-reference/endpoint/getRespondentStatus).",
            "example": true,
            "default": true
          }
        }
      },
      "DataPoint_v2": {
        "description": "An array of data points used to perform quality checks on each respondent.",
        "type": "object",
        "discriminator": {
          "propertyName": "qualityCheck",
          "mapping": {
            "OES": "#/components/schemas/OESDataPoint",
            "TS": "#/components/schemas/TSDataPoint", 
            "GQS": "#/components/schemas/GQSDataPoint",
            "CHS": "#/components/schemas/CHSDataPoint_v2",
            "BAS": "#/components/schemas/BASDataPoint_V2"
          }
        },
        "oneOf": [
          { "$ref": "#/components/schemas/OESDataPoint" },
          { "$ref": "#/components/schemas/TSDataPoint" },
          { "$ref": "#/components/schemas/GQSDataPoint" },
          { "$ref": "#/components/schemas/CHSDataPoint_v2" },
          { "$ref": "#/components/schemas/BASDataPoint_V2" }
        ]
      },
      "CHSDataPoint_v2": {
        "type": "object",
        "title": "CHS",
        "properties": {
          "qualityCheck": {
            "type": "string",
            "description": "A variable that **specifies the type of quality check applied to the data point**, determining how it will be assessed and evaluated.",
            "enum": ["CHS"]
          },
          "dataPointId": {
            "type": "string",
            "description": "**A unique identifier assigned to each data point**, allowing users to pick a customized name. This name will be used to identify and reference the data point later within the system. Note that there can be only one CHS datapoint per respondent. This datapoint should contain the entire interview.",
            "example": "CHS_DataPoint"
          },
          "interviewData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterviewData_v2"
            },
            "description": "This variable aggregates all relevant question-answer pairs used to evaluate the respondentâ€™s coherence. \n\n ðŸ§ª **Validations:**  \n - A **maximum of 1000** question/answer pairs are allowed per respondent.",
            "example": [{
              "questionId": "Q1",
              "question": "What type of accommodation did you stay in?",
              "answer": "Hotel"
            }]
          }
        },
        "required": ["dataPointId", "qualityCheck", "interviewData"]
      },
      "InterviewData_v2": {
        "description": "Structure for interview-based questions",
        "type": "object",
        "required": [
          "questionId",
          "question",
          "answer"
        ],
        "properties": {
          "questionId": {
            "type": "string",
            "description": "A unique identifier for the question",
            "example": "Q1"
          },
          "question": {
            "type": "string",
            "description": "**Contains the title or text of the question**.",
            "example": "What type of accommodation did you stay in?"
          },
          "answer": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "description": "A variable that stores the **respondentâ€™s answer to the question**.",
            "example": "Hotel"
          }
        }
      },
      "BASDataPoint_V2": {
        "type": "object",
        "title": "BAS",
        "properties": {
          "qualityCheck": {
            "type": "string",
            "description": "A variable that **specifies the type of quality check applied to the data point**, determining how it will be assessed and evaluated.",
            "enum": ["BAS"]
          },
          "dataPointId": {
            "type": "string",
            "description": "**A unique identifier assigned to each data point**, allowing users to pick a customized name. This name will be used to identify and reference the data point later within the system.",
            "example": "Q1"
          },
          "interactionData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InteractionData_V2"
            },
            "description": "This variable compiles all relevant information about the interaction of the respondent with the data point. \n\n ðŸ”¦ **Tip:** Need a template to extract keystroke patterns directly from individual browsers? Contact us at [support@redem.io](mailto:support@redem.io) \n\n â­• **Note:** - A **minimum of 3** interactions are needed to compute a score. \n",
            "example": [{
              "interactionType": "KEYSTROKE",
              "value": "W",
              "timestamp": "2024-12-01T06:22:59.833Z"
            }]
          }
        },
        "required": ["dataPointId", "qualityCheck", "interactionData"]
      },
      "InteractionData_V2": {
        "description": "This variable compiles all relevant information about the interaction of the respondent with the data point. \n\n ðŸ”¦ **Tip:** Need a template to extract keystroke patterns directly from individual browsers? Contact us at [support@redem.io](mailto:support@redem.io)", 
        "type": "object",
        "required": ["value", "interactionType", "timestamp"],
        "properties": {
          "interactionType": { 
            "type": "string",
            "description": "The type of interaction the respondent had with the data point. \n\n â­• **Note:** Currently, the API supports `KEYSTROKE` and `COPY_AND_PASTE` interactions. Future updates will extend support to additional interactions, such as **mouse clicks, mouse movements**, and more.",
            "enum": ["KEYSTROKE", "COPY_AND_PASTE"]
          },
          "value": { 
            "type": "string",
            "description": "The value of the interaction, which should include the final value once the interaction is complete."
          },
          "timestamp": { 
            "type": "string",
            "description": "The timestamp of the interaction. The timestamp is in the format `YYYY-MM-DDTHH:MM:SS.SSSZ`."
          }
        }
      }
    },
    "responses": {
      "ValidationError": {
        "description": "Validation Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "VALIDATION_ERROR"
                }
              }
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Unauthorized Access",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UNAUTHORIZED"
                }
              }
            }
          }
        }
      },
      "DuplicateError": {
        "description": "Duplicate Respondent Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "DUPLICATE_RESPONDENT"
                }
              }
            }
          }
        }
      },
      "ServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      },
      "ProjectNotFoundError": {
        "description": "Project Not Found Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "PROJECT_NOT_FOUND"
                }
              }
            }
          }
        }
      },
      "RespondentNotFoundError": {
        "description": "Respondent Not Found Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "RESPONDENT_NOT_FOUND"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Survey",
      "description": "Survey management"
    },
    {
      "name": "Respondent",
      "description": "Respondent management"
    }
  ],
  "paths": {
    "/addRespondent": {
      "post": {
        "tags": [
          "Respondent"
        ],
        "summary": "Add a new respondent",
        "description": "API endpoint for adding a new respondent with quality check data",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRespondentRequest"
              },
              "example": {
                "respondentId": "RESP497770",
                "surveyName": "Global Vacation Insights 2024",
                "dataPoints": [
                  {
                    "qualityCheck": "OES",
                    "dataPointId": "Q1",
                    "question": "Where did you spend your last vacation?",
                    "answer": "We were at Lake Garda in Italy",
                    "keywords": ["Beach", "Mountains", "Lake", "Museums", "Europe", "Asia", "Destination"],
                    "activateDuplicateDetection": true,
                    "allowedLanguages": ["en", "de", "it"]
                  },
                  {
                    "qualityCheck": "TS",
                    "dataPointId": "durationQ1", 
                    "duration": 42670
                  },
                  {
                    "qualityCheck": "GQS",
                    "dataPointId": "Q2", 
                    "gridAnswersPattern": [7, 8, 9, 1, 3, 5, 2, 5, 9, 6] 
                  },
                  {
                    "qualityCheck": "OES",
                    "dataPointId": "Q3", 
                    "question": "What was the most memorable part of your last vacation?",
                    "answer": "Italian cuisine, especially pizza and fine wine.",
                    "keywords": ["Cuisine", "Food", "Art", "Adventure", "History", "Landscape", "Culture"],
                    "activateDuplicateDetection": true,
                    "allowedLanguages": ["en", "de", "it"]
                  },
                  {
                    "qualityCheck": "TS",
                    "dataPointId": "durationQ3", 
                    "duration": 69720
                  },
                  {
                    "qualityCheck": "CHS",
                    "dataPointId": "CHS_Question",
                    "interviewData": [
                      { "question": "What mode of transport did you use?", "answer": "Car" },
                      { "question": "How many days did you stay?", "answer": 5 }, 
                      { "question": "Did you travel with family?", "answer": "yes" },
                      { "question": "What was your approximate total budget for the trip (in EUR)?", "answer": 1500 },
                      { "question": "What type of accommodation did you stay in?", "answer": "Hotel" }
                    ]
                  },
                  {
                    "qualityCheck": "GQS",
                    "dataPointId": "Q4",
                    "gridAnswersPattern": [2, 1, 4, 3, 5, 2, 3, 1, 1, 1] 
                  },
                  {
                    "qualityCheck": "TS",
                    "dataPointId": "totalDuration",
                    "duration": 256843
                  },
                  {
                    "qualityCheck": "BAS",
                    "dataPointId": "interactionsQ1",
                    "interactionData": [
                      { "interactionType": "KEYSTROKE","value": "W",  "timestamp": "2024-12-01T06:22:59.809Z" },
                      { "interactionType": "KEYSTROKE","value": "We", "timestamp": "2024-12-01T06:22:59.833Z" },
                      { "interactionType": "KEYSTROKE","value": "We ", "timestamp": "2024-12-01T06:22:59.909Z" },
                      { "interactionType": "KEYSTROKE","value": "We w", "timestamp": "2024-12-01T06:22:59.962Z" },
                      { "interactionType": "KEYSTROKE","value": "We we", "timestamp": "2024-12-01T06:23:00.024Z" },
                      { "interactionType": "KEYSTROKE","value": "We were", "timestamp": "2024-12-01T06:23:00.086Z" },
                      { "interactionType": "KEYSTROKE","value": "We were ", "timestamp": "2024-12-01T06:23:00.148Z" },
                      { "interactionType": "KEYSTROKE","value": "We were a", "timestamp": "2024-12-01T06:23:00.210Z" },
                      { "interactionType": "KEYSTROKE","value": "We were at", "timestamp": "2024-12-01T06:23:00.272Z" }
                    ]
                  }
                ],
                "activateCleaning": true,
                "cleaningSettings": {
                  "redemScore": 60,
                  "OES": {
                    "activate": true,
                    "score": 40,
                    "minDataPoints": 2,
                    "categories": {
                      "GENERIC_ANSWER": {"activate": false, "minDataPoints": 2},
                      "NO_INFORMATION": {"activate": false, "minDataPoints": 2},
                      "BAD_LANGUAGE": {"activate": true, "minDataPoints": 2},
                      "NONSENSE": {"activate": true, "minDataPoints": 2},
                      "DUPLICATE_ANSWER": {"activate": false, "minDataPoints": 1},
                      "DUPLICATE_RESPONDENT": {"activate": false, "minDataPoints": 1},
                      "WRONG_TOPIC": {"activate": true, "minDataPoints": 2},
                      "WRONG_LANGUAGE": {"activate": true, "minDataPoints": 2},
                      "AI_GENERATED_ANSWER": {"activate": true, "minDataPoints": 2}
                    }
                  },
                  "CHS": {
                    "activate": true,
                    "score": 20
                  },
                  "GQS": {
                    "activate": true,
                    "score": 10,
                    "minDataPoints": 2
                  },
                  "TS": {
                    "activate": true,
                    "score": 20
                  },
                  "BAS": {
                    "activate": true,
                    "score": 10,
                    "minDataPoints": 2,
                    "categories": {
                      "UNNATURAL_TYPING": {"activate": true, "minDataPoints": 2},
                      "COPY_AND_PASTE": {"activate": true, "minDataPoints": 2}
                    }
                  }
                },
                "synchronousResponse": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When a request is successfully processed, the API returns a 200 OK status code along with the expected data. The structure of the response depends on the synchronousResponse parameter provided in the request body, which determines whether the response is synchronous (results of the respondent evaluation are returned immediately) or asynchronous (a respondent is created and the results of the respondent evaluation are available later through a separate endpoint).",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Synchronous Response",
                      "description": "**Synchronous Response** \n\nThis response mode is triggered when `synchronousResponse` is set to `true`. \n\n In this mode, the system generates a detailed response containing all quality parameters of the respondent. The request will wait (`await`) until the full response is ready before proceeding.",
                      "type": "object",
                      "properties": {
                        "success":{
                          "type":"boolean",
                          "description":"A variable indicating whether the **operation was successful**.",
                          "enum":[true,false]
                        },
                        "message":{
                          "type":"string",
                          "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                        },
                        "results":{
                          "type":"object",
                          "description": "This variable includes **all quality parameters associated with a respondent**.",
                          "properties":{
                            "respondentId": {
                              "type": "string",
                              "description": "A variable that **indicates the respondent**."
                            },
                            "status": {
                              "type": "string",
                              "description": "A variable that represents the current state of the respondent evaluation. For synchronous responses, this value will always be `COMPLETED`. ",
                              "enum": [
                                "COMPLETED"
                              ]
                            },
                            "respondentQuality": {
                              "$ref": "#/components/schemas/RespondentResults",
                              "description": "This variable includes **all quality parameters associated with a respondent**. \n\n **ðŸ’¡Important:** Even if a respondent fails evaluation, the response will still be returned with results with an error code of `-999` instead of valid scores. \n\n **â­• Note:** The value `-999` is a predefined code returned by **ReDem** whenever a respondent cannot be evaluated. This applies to all quality scores, **including ReDem Score (R-Score), OES, GQS, CHS, TS, and BAS**."
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "Asynchronous Response",
                      "description": "**Asynchronous Response** \n\nThis response mode is triggered when `synchronousResponse` is set to `false`. \n\n In this case, the system generates a detailed response and processes it asynchronously, meaning the request will not wait (`await`) for the evaluation to complete. Instead, the evaluation is performed in the background, and the status of the respondent can be retrieved later using the [Get Respondent Status](/api-reference/endpoint/getRespondentStatus) endpoint.",
                      "type": "object",
                      "properties": {
                        "success":{
                          "type":"boolean",
                          "description":"A variable indicating whether the **operation was successful**.",
                          "enum":[true,false]
                        },
                        "message":{
                          "type":"string",
                          "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                        },
                        "results":{
                          "type":"object",
                          "description": "This variable includes **all quality parameters associated with a respondent**.",
                          "properties":{
                            "respondentId": {
                              "type": "string",
                              "description": "A variable that **indicates the respondent**."
                            },
                            "status": {
                              "type": "string",
                              "description": "A variable that represents the **current state of the respondent evaluation**.",
                              "enum": [
                                "QUEUED"
                              ]
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Synchronous Response": {
                    "summary": "Synchronous Response Example",
                    "value": {
                      "success":true,
                      "message":"Respondent Evaluated successfully",
                      "results":{
                        "respondentId": "RESP497770",
                        "status": "COMPLETED",
                        "respondentQuality": {
                          "isExcluded": true,
                          "reasonsForExclusion": ["Open Ended Score Threshold", "Coherence Score Threshold"],
                          "redemScore": 85,
                          "qualityScoreSummary": [
                            {"qualityCheck": "OES", "score": 80},
                            {"qualityCheck": "CHS", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ...", "incoherentQuestions": ["Q1", "Q2"]},
                            {"qualityCheck": "GQS", "score": 85},
                            {"qualityCheck": "TS", "score": 70},
                            {"qualityCheck": "BAS", "score": 75}
                          ],
                          "dataPointsSummary": [
                            {"qualityCheck": "OES", "dataPointId": "Q1", "score": 85, "category": "VALID_ANSWER"},
                            {"qualityCheck": "TS", "dataPointId": "durationQ1", "score": 95},
                            {"qualityCheck": "GQS", "dataPointId": "Q2", "score": 90},
                            {"qualityCheck": "OES", "dataPointId": "Q3", "score": 75, "category": "VALID_ANSWER"},
                            {"qualityCheck": "TS", "dataPointId": "durationQ3", "score": 50},
                            {"qualityCheck": "CHS", "dataPointId": "CHS_Question", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                            {"qualityCheck": "GQS", "dataPointId": "Q4", "score": 80},
                            {"qualityCheck": "TS", "dataPointId": "totalDuration", "score": 65},
                            {"qualityCheck": "BAS", "dataPointId": "interactionsQ1", "score": 75, "category": "NATURAL_TYPING"}
                          ]
                        }
                      }
                    }
                  },
                  "Asynchronously Response": {
                    "summary": "Asynchronous Response Example",
                    "value": {
                      "success":true,
                      "message":"Respondent Queued for Evaluation",
                      "results":{
                        "respondentId": "RESP497770",
                        "status": "QUEUED"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "When a request fails due to invalid input or other errors, the API returns a 400 Bad Request status code. The response includes a descriptive `message` explaining the issue and an `error` object containing additional details to aid in diagnosing and resolving the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Validation Error",
                      "description": "Indicating a validation failure, the response includes a `message` field specifying the issue and an `errors` object listing the missing or incorrect fields to help clients resolve them. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.", 
                      "type": "object"
                    },
                    {
                      "title": "ID already exists",
                      "description": "If the system detects a duplicate `respondentId` within the same survey, it returns an error. The `respondentId` serves as a unique identifier for each respondent within a survey, ensuring they are distinguishable. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    },
                    {
                      "title": "Survey has been stopped",
                      "description": "If a respondent addition request is made for a survey that is **stopped**, the system returns an error. A **stopped** survey no longer accepts new respondents, preventing further additions. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    },
                    {
                      "title": "Insufficient credit balance",
                      "description": "If there are **not enough credits available to add a respondent**, the system returns an error. Adding respondents requires sufficient credits, and if the limit is reached, no further respondents can be added. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    },
                    {
                      "title": "Respondent processing timed out",
                      "description": "If processing a respondent **exceeds 20 seconds**, the system returns an error. If the processing time surpasses this threshold, the request continues in the background, but an error response is returned. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Validation Error": {
                    "value": {
                      "success":false,
                      "message":"Validation Error",
                      "errors":{
                        "0": "\"surveyName\" is required",
                        "1": "\"dataPoints[0].dataPointId\" is required"
                      }
                    }
                  },
                  "ID already exists": {
                    "value": {
                      "success":false,
                      "message":"ID already exists",
                      "errors":{}
                    }
                  },
                  "Survey has been stopped": {
                    "value": {
                      "success":false,
                      "message":"Survey has been stopped",
                      "errors":{}
                    }
                  },
                  "Insufficient credit balance": {
                    "value": {
                      "success":false,
                      "message":"Insufficient credit balance",
                      "errors":{}
                    }
                  },
                  "Respondent processing timed out": {
                    "value": {
                      "success": false,
                      "message":"Respondent processing timed out",
                      "errors":{}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/getRespondent": {
      "post": {
        "tags": [
          "Respondent"
        ],
        "summary": "Get respondent results",
        "description": "Retrieve the quality check results and status for a specific respondent.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetRespondentRequest"
              },
              "example": {
                "surveyName": "Global Vacation Insights 2024",
                "respondentId": "RESP497770"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When a request is successfully processed, the API responds with a `200 OK` status code and the expected data. The structure of the response varies based on the respondent's status.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Respondet Completed",
                      "description": "This response mode available when respondent status is `COMPLETED`. \n\n In this case, the system generates a comprehensive, quality assessment of the respondent.",
                      "type": "object",
                      "properties": {
                        "success":{
                          "type":"boolean",
                          "description":"A variable indicating whether the **operation was successful**.",
                          "enum":[true,false]
                        },
                        "message":{
                          "type":"string",
                          "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                        },
                        "results": {
                          "type": "object",
                          "description": "This variable includes **all quality parameters associated with a respondent**.",
                          "properties": {
                            "respondentId": {
                              "type": "string",
                              "description": "A variable that **indicates the respondent**."
                            },
                            "status": {
                              "type": "string",
                              "description": "A variable that represents the **current state of the respondent evaluation**. For respondents who have been successfully evaluated, this value will always be `COMPLETED`."
                            },
                            "respondentQuality": {
                              "description": "This variable **represents respondent data that has been evaluated based on the quality checks specified in the /addRespondent request**. \n\n ðŸ’¡Important: Even if a respondent fails evaluation, the response will still be returned with results with an error code of -999 instead of valid scores. \n\n **â­• Note:** The value -999 is a predefined code returned by ReDem whenever a respondent cannot be evaluated. This applies to all quality scores, including ReDem Score (R-Score), OES, GQS, CHS, TS, and BAS.",
                              "$ref": "#/components/schemas/RespondentResults"
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "Respondent Processing",
                      "description": "This response mode available when respondent status is `QUEUED`. \n\n In this case, the system will only return the status of the respondent, without the quality assessment of the respondent.",
                      "type": "object",
                      "properties": {
                        "success":{
                          "type":"boolean",
                          "description":"A variable that **indicates whether the operation was successful or not**.",
                          "enum":[true,false]
                        },
                        "message":{
                          "type":"string",
                          "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                        },
                        "results": {
                          "type": "object",
                          "description": "This object serves as a **container to hold the results for the requested data**, encapsulating all relevant information and outputs in a structured format.",
                          "properties": {
                            "respondentId": {
                              "type": "string",
                              "description": "A variable that **indicates the respondent**."
                            },
                            "status": {
                              "type": "string",
                              "description": "A variable that represents the **current state of the respondent evaluation**. For respondents who are still being processed, this value will always be `QUEUED`."
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Respondent Completed": {
                    "summary": "Respondent Completed Example",
                    "value": {
                      "success":true,
                      "message":"Respondent quality successfully retrieved",
                      "results": {
                        "respondentId": "RESP497770",
                        "status": "COMPLETED",
                        "respondentQuality": {
                          "isExcluded": true,
                          "reasonsForExclusion": ["Open Ended Score Threshold", "Coherence Score Threshold"],
                          "redemScore": 85,
                          "qualityScoreSummary": [
                            {"qualityCheck": "OES", "score": 80},
                            {"qualityCheck": "CHS", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                            {"qualityCheck": "GQS", "score": 85},
                            {"qualityCheck": "TS", "score": 70},
                            {"qualityCheck": "BAS", "score": 75}
                          ],
                          "dataPointsSummary": [
                            {"qualityCheck": "OES", "dataPointId": "Q1", "score": 85, "category": "VALID_ANSWER"},
                            {"qualityCheck": "TS", "dataPointId": "durationQ1", "score": 95},
                            {"qualityCheck": "GQS", "dataPointId": "Q2", "score": 90},
                            {"qualityCheck": "OES", "dataPointId": "Q3", "score": 75, "category": "VALID_ANSWER"},
                            {"qualityCheck": "TS", "dataPointId": "durationQ3", "score": 50},
                            {"qualityCheck": "CHS", "dataPointId": "CHS_Question", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                            {"qualityCheck": "GQS", "dataPointId": "Q4", "score": 80},
                            {"qualityCheck": "TS", "dataPointId": "totalDuration", "score": 65},
                            {"qualityCheck": "BAS", "dataPointId": "interactionsQ1", "score": 75, "category": "NATURAL_TYPING"}
                          ]
                        }
                      }
                    }
                  },
                  "Respondent Processing": {
                    "summary": "Respondent Processing Example",
                    "value": {
                      "success":true,
                      "message":"Respondent quality successfully retrieved",
                      "results":{
                        "respondentId": "RESP497770",
                        "status": "QUEUED"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "When a request fails due to invalid input or other errors, the API returns a 400 Bad Request status code. The response includes a descriptive `message` explaining the issue and an `error` object containing additional details to aid in diagnosing and resolving the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Validation Error",
                      "description": "Indicating a validation failure, the response includes a `message` field specifying the issue and an `errors` object listing the missing or incorrect fields to help clients resolve them. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.", 
                      "type": "object"
                    },
                    {
                      "title": "Survey not found",
                      "description": "This error occurs when the **requested survey does not exist in the system**. It may happen if the survey name is incorrect, has been deleted, or was never created. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    },
                    {
                      "title": "Respondent not found",
                      "description": "This error occurs when the **requested respondentId does not exist in the system**. It may happen if the respondent has not been added to the specified survey or if an incorrect ID was provided. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Validation Error": {
                    "value": {
                      "success":false,
                      "message":"Validation Error",
                      "errors":{
                        "0": "\"surveyName\" is required",
                        "1": "\"respondentId\" is required"
                      }
                    }
                  },
                  "Survey not found": {
                    "value": {
                      "success":false,
                      "message":"Survey not found",
                      "errors":{}
                    }
                  },
                  "Respondent not found": {
                    "value": {
                      "success":false,
                      "message":"Respondent not found",
                      "errors":{}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/getAllRespondents": {
      "post": {
        "tags": [
          "Respondent"
        ],
        "summary": "Get all respondents",
        "description": "Retrieve the quality check results and status for all respondents in a specific survey.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllRespondentsRequest"
              },
              "example": {
                "surveyName": "Global Vacation Insights 2024"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When a request is successfully processed, the API responds with a `200 OK` status code and the expected data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success":{
                      "type":"boolean",
                      "description":"A variable indicating whether the **operation was successful**.",
                      "enum":[true,false]
                    },
                    "message":{
                      "type":"string",
                      "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                    },
                    "results": {
                      "type": "array",
                      "description": "This variable includes **all quality parameters associated with a respondent**.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "respondentId": {
                            "type": "string",
                            "description": "**The unique identifier for a respondent**, making it easy to distinguish them from others in the survey.",
                            "example": "RESP497770"
                          },
                          "status": {
                            "type": "string",
                            "description": "A variable that **indicates the current state of the respondent**. \n\n **ðŸ’¡Important:** Even if a respondent fails evaluation, the response status will still be `COMPLETED`. \n\n **â­• Note:** The value -999 is a predefined code returned by ReDem whenever a respondent cannot be evaluated. This applies to all quality scores, including ReDem Score (R-Score), OES, GQS, CHS, TS, and BAS.",
                            "enum": ["COMPLETED", "QUEUED"]
                          },
                          "respondentQuality": {
                            "description": "This variable **represents respondent data that has been evaluated according to the quality checks specified in the /addRespondent request**. \n\n **â­• Note:** this variable will only available if the respondent status is `COMPLETED`.",
                            "$ref": "#/components/schemas/RespondentResults"
                          }
                        }
                      }

                    }
                  }
                },
                "example": {
                  "success":true,
                  "message":"Respondents quality retrieved successfully",
                  "results": [
                    { 
                      "respondentId": "RESP497770",
                      "status": "COMPLETED",
                      "respondentQuality": {
                        "isExcluded": false,
                        "reasonsForExclusion": ["Open Ended Score Threshold", "Coherence Score Threshold"],
                        "redemScore": 85,
                        "dataPointsSummary": [
                          {"qualityCheck": "OES", "dataPointId": "Q1", "score": 85, "category": "VALID_ANSWER"},
                          {"qualityCheck": "TS", "dataPointId": "durationQ1", "score": 95},
                          {"qualityCheck": "GQS", "dataPointId": "Q2", "score": 90},
                          {"qualityCheck": "OES", "dataPointId": "Q3", "score": 75, "category": "VALID_ANSWER"},
                          {"qualityCheck": "TS", "dataPointId": "durationQ3", "score": 50},
                          {"qualityCheck": "CHS", "dataPointId": "CHS_Question", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                          {"qualityCheck": "GQS", "dataPointId": "Q4", "score": 80},
                          {"qualityCheck": "TS", "dataPointId": "totalDuration", "score": 65}
                        ],
                        "qualityScoreSummary": [
                          {"qualityCheck": "OES", "score": 80},
                          {"qualityCheck": "CHS", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                          {"qualityCheck": "GQS", "score": 85},
                          {"qualityCheck": "TS", "score": 70}
                        ]
                      }
                    },
                    { "respondentId": "RESP497771", "status": "PROCESSING" },
                    { "respondentId": "RESP497772", "status": "PROCESSING" },
                    { 
                      "respondentId": "RESP497773",
                      "status": "COMPLETED",
                      "respondentQuality": {
                        "isExcluded": false,
                        "reasonsForExclusion": [],
                        "redemScore": -999,
                        "dataPointsSummary": [
                          {"qualityCheck": "OES", "dataPointId": "Q1", "score": -999, "category": "N/A"},
                          {"qualityCheck": "TS", "dataPointId": "durationQ1", "score": -999},
                          {"qualityCheck": "GQS", "dataPointId": "Q2", "score": -999},
                          {"qualityCheck": "OES", "dataPointId": "Q3", "score": -999, "category": "N/A"},
                          {"qualityCheck": "TS", "dataPointId": "durationQ3", "score": -999},
                          {"qualityCheck": "CHS", "dataPointId": "CHS_Question", "score": -999, "reason": "N/A"},
                          {"qualityCheck": "GQS", "dataPointId": "Q4", "score": -999},
                          {"qualityCheck": "TS", "dataPointId": "totalDuration", "score": -999}
                        ],
                        "qualityScoreSummary": [
                          {"qualityCheck": "OES", "score": -999},
                          {"qualityCheck": "CHS", "score": -999, "reason": "N/A"},
                          {"qualityCheck": "GQS", "score": -999},
                          {"qualityCheck": "TS", "score": -999}
                        ]
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "When a request fails due to invalid input or other errors, the API returns a 400 Bad Request status code. The response includes a descriptive `message` explaining the issue and an `error` object containing additional details to aid in diagnosing and resolving the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Validation Error",
                      "description": "Indicating a validation failure, the response includes a `message` field specifying the issue and an `errors` object listing the missing or incorrect fields to help clients resolve them. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.", 
                      "type": "object"
                    },
                    {
                      "title": "Survey not found",
                      "description": "This error occurs when the **requested survey does not exist in the system**. It may happen if the survey name is incorrect, has been deleted, or was never created. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Validation Error": {
                    "value": {
                      "success":false,
                      "message":"Validation Error",
                      "errors":{
                        "0": "\"surveyName\" is required"
                      }
                    }
                  },
                  "Survey not found": {
                    "value": {
                      "success":false,
                      "message":"Survey not found",
                      "errors":{}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/stopSurvey": {
      "post": {
        "tags": [
          "Survey"
        ],
        "summary": "Stop a survey",
        "operationId": "stopSurvey",
        "description": "API endpoint for stopping a survey. This can be triggered once the survey is completed.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllRespondentsRequest"
              },
              "example": {
                "surveyName": "Global Vacation Insights 2024"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Upon successful processing, the API returns a 200 OK status code along with the expected data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success":{
                      "type":"boolean",
                      "description":"A variable indicating whether the **operation was successful**.",
                      "enum":[true,false]
                    },
                    "message":{
                      "type":"string",
                      "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                    },
                    "results": {
                      "type": "object",
                      "description": "This object serves as a **container to hold the results for the requested data**, encapsulating all relevant information and outputs in a structured format.",
                      "properties": {
                        "surveyName": {
                          "type": "string",
                          "description": "A variable that **indicates the survey name**."
                        },
                        "status": {
                          "type": "string",
                          "description": "A variable that **indicates the status of the survey**. \n\n **â­• Note:** ReDem surveys have two possible statuses: `RUNNING` and `STOPPED`. The survey status will be updated to `STOPPED` once the survey is stopped."
                        }
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "message": "Survey successfully stopped",
                  "results": {
                    "surveyName": "Global Vacation Insights 2024",
                    "status": "STOPPED"
                  }
                }
              }
            }
          },
          "400": {
            "description": "When a request fails due to invalid input or other errors, the API returns a 400 Bad Request status code. The response includes a descriptive `message` explaining the issue and an `error` object containing additional details to aid in diagnosing and resolving the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Validation Error",
                      "description": "Indicating a validation failure, the response includes a `message` field specifying the issue and an `errors` object listing the missing or incorrect fields to help clients resolve them. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.", 
                      "type": "object"
                    },
                    {
                      "title": "Survey not found",
                      "description": "This error occurs when the **requested survey does not exist in the system**. It may happen if the survey name is incorrect, has been deleted, or was never created. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Validation Error": {
                    "value": {
                      "success":false,
                      "message":"Validation Error",
                      "errors":{
                        "0": "\"surveyName\" is required"
                      }
                    }
                  },
                  "Survey not found": {
                    "value": {
                      "success":false,
                      "message":"Survey not found",
                      "errors":{}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/creditCalculation": {
      "post": {
        "tags": [
          "Respondent"
        ],
        "summary": "Calculate the maximum number of credits needed for a respondent",
        "operationId": "creditCalculation",
        "description": "API endpoint for calculating the required number of credits for a respondent.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditCalculationRequest"
              },
              "example": {
                "OESDataPoints": 2,
                "GQSAnswers": 35,
                "TSDataPoints": 2,
                "CHSAnswers": 25,
                "BASDataPoints": 2
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When a request is successfully processed, the API returns a 200 OK status code along with the expected data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success":{
                      "type":"boolean",
                      "description":"A variable indicating whether the **operation was successful**.",
                      "enum":[true,false]
                    },
                    "message":{
                      "type":"string",
                      "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                    },
                    "results": {
                      "type": "object",
                      "description": "This object serves as a **container to hold the results for the requested data**, encapsulating all relevant information and outputs in a structured format.",
                      "properties": {
                        "creditCalculation": {
                          "description": "This variable **represents the detailed breakdown of the number of credits** calculated for a respondent.",
                          "type": "object",
                          "properties": {
                            "totalCredits": {
                              "type": "number",
                              "description": "This variable **represents the total number of credits** calculated for a respondent."
                            },
                            "calculationBreakdown": {
                              "description": "This variable **represents the detailed breakdown of the number of credits** calculated for a respondent.",
                              "$ref": "#/components/schemas/CalculationBreakdown"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "message": "Credit calculation successfully retrieved",
                  "results": {
                    "creditCalculation": {
                      "totalCredits": 12,
                      "calculationBreakdown": {
                        "OES": {"credits": 4, "dataPoints": 2},
                        "GQS": {"credits": 3, "answers": 35},
                        "TS": {"credits": 1, "dataPoints": 2},
                        "CHS": {"credits": 4, "answers": 25},
                        "BAS": {"credits": 4, "dataPoints": 2}
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "When a request fails due to invalid input or other errors, the API returns a 400 Bad Request status code. The response includes a descriptive `message` explaining the issue and an `error` object containing additional details to aid in diagnosing and resolving the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Validation Error",
                      "description": "Indicating a validation failure, the response includes a `message` field specifying the issue and an `errors` object listing the missing or incorrect fields to help clients resolve them. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.", 
                      "type": "object"
                    },
                    {
                      "title": "Failed to calculate credits",
                      "description": "This error occurs when the **system fails to calculate the credits**. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Validation Error": {
                    "value": {
                      "success":false,
                      "message":"Validation Error",
                      "errors":{
                        "0": "\"OESDataPoints\" is required",
                        "1": "\"GQSAnswers\" is required",
                        "2": "\"TSDataPoints\" is required",
                        "3": "\"CHSAnswers\" is required",
                        "4": "\"BASDataPoints\" is required"
                      }
                    }
                  },
                  "Failed to calculate credits": {
                    "value": {
                      "success":false,
                      "message":"Failed to calculate credits",
                      "errors":{}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/addRespondent": {
      "post": {
        "tags": [
          "Respondent"
        ],
        "summary": "Add a new respondent",
        "description": "API endpoint for adding a new respondent with quality check data",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRespondentRequest_v2"
              },
              "example": {
                "respondentId": "RESP497770",
                "surveyName": "Global Vacation Insights 2024",
                "dataPoints": [
                  {
                    "qualityCheck": "OES",
                    "dataPointId": "Q1",
                    "question": "Where did you spend your last vacation?",
                    "answer": "We were at Lake Garda in Italy",
                    "keywords": ["Beach", "Mountains", "Lake", "Museums", "Europe", "Asia", "Destination"],
                    "activateDuplicateDetection": true,
                    "allowedLanguages": ["en", "de", "it"]
                  },
                  {
                    "qualityCheck": "TS",
                    "dataPointId": "durationQ1", 
                    "duration": 42670
                  },
                  {
                    "qualityCheck": "GQS",
                    "dataPointId": "Q2", 
                    "gridAnswersPattern": [7, 8, 9, 1, 3, 5, 2, 5, 9, 6] 
                  },
                  {
                    "qualityCheck": "OES",
                    "dataPointId": "Q3", 
                    "question": "What was the most memorable part of your last vacation?",
                    "answer": "Italian cuisine, especially pizza and fine wine.",
                    "keywords": ["Cuisine", "Food", "Art", "Adventure", "History", "Landscape", "Culture"],
                    "activateDuplicateDetection": true,
                    "allowedLanguages": ["en", "de", "it"]
                  },
                  {
                    "qualityCheck": "TS",
                    "dataPointId": "durationQ3", 
                    "duration": 69720
                  },
                  {
                    "qualityCheck": "CHS",
                    "dataPointId": "CHS_Question",
                    "interviewData": [
                      { "questionId": "Q1", "question": "What mode of transport did you use?", "answer": "Car" },
                      { "questionId": "Q2", "question": "How many days did you stay?", "answer": 5 }, 
                      { "questionId": "Q3", "question": "Did you travel with family?", "answer": "yes" },
                      { "questionId": "Q4", "question": "What was your approximate total budget for the trip (in EUR)?", "answer": 1500 },
                      { "questionId": "Q5", "question": "What type of accommodation did you stay in?", "answer": "Hotel" }
                    ]
                  },
                  {
                    "qualityCheck": "GQS",
                    "dataPointId": "Q4",
                    "gridAnswersPattern": [2, 1, 4, 3, 5, 2, 3, 1, 1, 1] 
                  },
                  {
                    "qualityCheck": "TS",
                    "dataPointId": "totalDuration",
                    "duration": 256843
                  },
                  {
                    "qualityCheck": "BAS",
                    "dataPointId": "interactionsQ1",
                    "interactionData": [
                      { "interactionType": "KEYSTROKE","value": "W",  "timestamp": "2024-12-01T06:22:59.809Z" },
                      { "interactionType": "KEYSTROKE","value": "We", "timestamp": "2024-12-01T06:22:59.833Z" },
                      { "interactionType": "KEYSTROKE","value": "We ", "timestamp": "2024-12-01T06:22:59.909Z" },
                      { "interactionType": "KEYSTROKE","value": "We w", "timestamp": "2024-12-01T06:22:59.962Z" },
                      { "interactionType": "KEYSTROKE","value": "We we", "timestamp": "2024-12-01T06:23:00.024Z" },
                      { "interactionType": "KEYSTROKE","value": "We were", "timestamp": "2024-12-01T06:23:00.086Z" },
                      { "interactionType": "KEYSTROKE","value": "We were ", "timestamp": "2024-12-01T06:23:00.148Z" },
                      { "interactionType": "KEYSTROKE","value": "We were a", "timestamp": "2024-12-01T06:23:00.210Z" },
                      { "interactionType": "KEYSTROKE","value": "We were at", "timestamp": "2024-12-01T06:23:00.272Z" }
                    ]
                  }
                ],
                "activateCleaning": true,
                "cleaningSettings": {
                  "redemScore": 60,
                  "OES": {
                    "activate": true,
                    "score": 40,
                    "minDataPoints": 2,
                    "categories": {
                      "GENERIC_ANSWER": {"activate": false, "minDataPoints": 2},
                      "NO_INFORMATION": {"activate": false, "minDataPoints": 2},
                      "BAD_LANGUAGE": {"activate": true, "minDataPoints": 2},
                      "NONSENSE": {"activate": true, "minDataPoints": 2},
                      "DUPLICATE_ANSWER": {"activate": false, "minDataPoints": 1},
                      "DUPLICATE_RESPONDENT": {"activate": false, "minDataPoints": 1},
                      "WRONG_TOPIC": {"activate": true, "minDataPoints": 2},
                      "WRONG_LANGUAGE": {"activate": true, "minDataPoints": 2},
                      "AI_GENERATED_ANSWER": {"activate": true, "minDataPoints": 2}
                    }
                  },
                  "CHS": {
                    "activate": true,
                    "score": 20
                  },
                  "GQS": {
                    "activate": true,
                    "score": 10,
                    "minDataPoints": 2
                  },
                  "TS": {
                    "activate": true,
                    "score": 20
                  },
                  "BAS": {
                    "activate": true,
                    "score": 10,
                    "minDataPoints": 2,
                    "categories": {
                      "UNNATURAL_TYPING": {"activate": true, "minDataPoints": 2},
                      "COPY_AND_PASTE": {"activate": true, "minDataPoints": 2}
                    }
                  }
                },
                "synchronousResponse": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When a request is successfully processed, the API returns a 200 OK status code along with the expected data. The structure of the response depends on the synchronousResponse parameter provided in the request body, which determines whether the response is synchronous (results of the respondent evaluation are returned immediately) or asynchronous (a respondent is created and the results of the respondent evaluation are available later through a separate endpoint).",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Synchronous Response",
                      "description": "**Synchronous Response** \n\nThis response mode is triggered when `synchronousResponse` is set to `true`. \n\n In this mode, the system generates a detailed response containing all quality parameters of the respondent. The request will wait (`await`) until the full response is ready before proceeding.",
                      "type": "object",
                      "properties": {
                        "success":{
                          "type":"boolean",
                          "description":"A variable indicating whether the **operation was successful**.",
                          "enum":[true,false]
                        },
                        "message":{
                          "type":"string",
                          "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                        },
                        "results":{
                          "type":"object",
                          "description": "This variable includes **all quality parameters associated with a respondent**.",
                          "properties":{
                            "respondentId": {
                              "type": "string",
                              "description": "A variable that **indicates the respondent**."
                            },
                            "status": {
                              "type": "string",
                              "description": "A variable that represents the current state of the respondent evaluation. For synchronous responses, this value will always be `COMPLETED`. ",
                              "enum": [
                                "COMPLETED"
                              ]
                            },
                            "respondentQuality": {
                              "$ref": "#/components/schemas/RespondentResults",
                              "description": "This variable includes **all quality parameters associated with a respondent**. \n\n **ðŸ’¡Important:** Even if a respondent fails evaluation, the response will still be returned with results with an error code of `-999` instead of valid scores. \n\n **â­• Note:** The value `-999` is a predefined code returned by **ReDem** whenever a respondent cannot be evaluated. This applies to all quality scores, **including ReDem Score (R-Score), OES, GQS, CHS, TS, and BAS**."
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "Asynchronous Response",
                      "description": "**Asynchronous Response** \n\nThis response mode is triggered when `synchronousResponse` is set to `false`. \n\n In this case, the system generates a detailed response and processes it asynchronously, meaning the request will not wait (`await`) for the evaluation to complete. Instead, the evaluation is performed in the background, and the status of the respondent can be retrieved later using the [Get Respondent Status](/api-reference/endpoint/getRespondentStatus) endpoint.",
                      "type": "object",
                      "properties": {
                        "success":{
                          "type":"boolean",
                          "description":"A variable indicating whether the **operation was successful**.",
                          "enum":[true,false]
                        },
                        "message":{
                          "type":"string",
                          "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                        },
                        "results":{
                          "type":"object",
                          "description": "This variable includes **all quality parameters associated with a respondent**.",
                          "properties":{
                            "respondentId": {
                              "type": "string",
                              "description": "A variable that **indicates the respondent**."
                            },
                            "status": {
                              "type": "string",
                              "description": "A variable that represents the **current state of the respondent evaluation**.",
                              "enum": [
                                "QUEUED"
                              ]
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Synchronous Response": {
                    "summary": "Synchronous Response Example",
                    "value": {
                      "success":true,
                      "message":"Respondent Evaluated successfully",
                      "results":{
                        "respondentId": "RESP497770",
                        "status": "COMPLETED",
                        "respondentQuality": {
                          "isExcluded": true,
                          "reasonsForExclusion": ["Open Ended Score Threshold", "Coherence Score Threshold"],
                          "redemScore": 85,
                          "qualityScoreSummary": [
                            {"qualityCheck": "OES", "score": 80},
                            {"qualityCheck": "CHS", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ...", "incoherentQuestions": ["Q1", "Q2"]},
                            {"qualityCheck": "GQS", "score": 85},
                            {"qualityCheck": "TS", "score": 70},
                            {"qualityCheck": "BAS", "score": 75}
                          ],
                          "dataPointsSummary": [
                            {"qualityCheck": "OES", "dataPointId": "Q1", "score": 85, "category": "VALID_ANSWER"},
                            {"qualityCheck": "TS", "dataPointId": "durationQ1", "score": 95},
                            {"qualityCheck": "GQS", "dataPointId": "Q2", "score": 90},
                            {"qualityCheck": "OES", "dataPointId": "Q3", "score": 75, "category": "VALID_ANSWER"},
                            {"qualityCheck": "TS", "dataPointId": "durationQ3", "score": 50},
                            {"qualityCheck": "CHS", "dataPointId": "CHS_Question", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                            {"qualityCheck": "GQS", "dataPointId": "Q4", "score": 80},
                            {"qualityCheck": "TS", "dataPointId": "totalDuration", "score": 65},
                            {"qualityCheck": "BAS", "dataPointId": "interactionsQ1", "score": 75, "category": "NATURAL_TYPING"}
                          ]
                        }
                      }
                    }
                  },
                  "Asynchronously Response": {
                    "summary": "Asynchronous Response Example",
                    "value": {
                      "success":true,
                      "message":"Respondent Queued for Evaluation",
                      "results":{
                        "respondentId": "RESP497770",
                        "status": "QUEUED"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "When a request fails due to invalid input or other errors, the API returns a 400 Bad Request status code. The response includes a descriptive `message` explaining the issue and an `error` object containing additional details to aid in diagnosing and resolving the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Validation Error",
                      "description": "Indicating a validation failure, the response includes a `message` field specifying the issue and an `errors` object listing the missing or incorrect fields to help clients resolve them. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.", 
                      "type": "object"
                    },
                    {
                      "title": "ID already exists",
                      "description": "If the system detects a duplicate `respondentId` within the same survey, it returns an error. The `respondentId` serves as a unique identifier for each respondent within a survey, ensuring they are distinguishable. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    },
                    {
                      "title": "Survey has been stopped",
                      "description": "If a respondent addition request is made for a survey that is **stopped**, the system returns an error. A **stopped** survey no longer accepts new respondents, preventing further additions. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    },
                    {
                      "title": "Insufficient credit balance",
                      "description": "If there are **not enough credits available to add a respondent**, the system returns an error. Adding respondents requires sufficient credits, and if the limit is reached, no further respondents can be added. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    },
                    {
                      "title": "Respondent processing timed out",
                      "description": "If processing a respondent **exceeds 20 seconds**, the system returns an error. If the processing time surpasses this threshold, the request continues in the background, but an error response is returned. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Validation Error": {
                    "value": {
                      "success":false,
                      "message":"Validation Error",
                      "errors":{
                        "0": "\"surveyName\" is required",
                        "1": "\"dataPoints[0].dataPointId\" is required"
                      }
                    }
                  },
                  "ID already exists": {
                    "value": {
                      "success":false,
                      "message":"ID already exists",
                      "errors":{}
                    }
                  },
                  "Survey has been stopped": {
                    "value": {
                      "success":false,
                      "message":"Survey has been stopped",
                      "errors":{}
                    }
                  },
                  "Insufficient credit balance": {
                    "value": {
                      "success":false,
                      "message":"Insufficient credit balance",
                      "errors":{}
                    }
                  },
                  "Respondent processing timed out": {
                    "value": {
                      "success": false,
                      "message":"Respondent processing timed out",
                      "errors":{}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/getRespondent": {
      "post": {
        "tags": [
          "Respondent"
        ],
        "summary": "Get respondent results",
        "description": "Retrieve the quality check results and status for a specific respondent.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetRespondentRequest"
              },
              "example": {
                "surveyName": "Global Vacation Insights 2024",
                "respondentId": "RESP497770"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When a request is successfully processed, the API responds with a `200 OK` status code and the expected data. The structure of the response varies based on the respondent's status.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Respondet Completed",
                      "description": "This response mode available when respondent status is `COMPLETED`. \n\n In this case, the system generates a comprehensive, quality assessment of the respondent.",
                      "type": "object",
                      "properties": {
                        "success":{
                          "type":"boolean",
                          "description":"A variable indicating whether the **operation was successful**.",
                          "enum":[true,false]
                        },
                        "message":{
                          "type":"string",
                          "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                        },
                        "results": {
                          "type": "object",
                          "description": "This variable includes **all quality parameters associated with a respondent**.",
                          "properties": {
                            "respondentId": {
                              "type": "string",
                              "description": "A variable that **indicates the respondent**."
                            },
                            "status": {
                              "type": "string",
                              "description": "A variable that represents the **current state of the respondent evaluation**. For respondents who have been successfully evaluated, this value will always be `COMPLETED`."
                            },
                            "respondentQuality": {
                              "description": "This variable **represents respondent data that has been evaluated based on the quality checks specified in the /addRespondent request**. \n\n ðŸ’¡Important: Even if a respondent fails evaluation, the response will still be returned with results with an error code of -999 instead of valid scores. \n\n **â­• Note:** The value -999 is a predefined code returned by ReDem whenever a respondent cannot be evaluated. This applies to all quality scores, including ReDem Score (R-Score), OES, GQS, CHS, TS, and BAS.",
                              "$ref": "#/components/schemas/RespondentResults"
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "Respondent Processing",
                      "description": "This response mode available when respondent status is `QUEUED`. \n\n In this case, the system will only return the status of the respondent, without the quality assessment of the respondent.",
                      "type": "object",
                      "properties": {
                        "success":{
                          "type":"boolean",
                          "description":"A variable that **indicates whether the operation was successful or not**.",
                          "enum":[true,false]
                        },
                        "message":{
                          "type":"string",
                          "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                        },
                        "results": {
                          "type": "object",
                          "description": "This object serves as a **container to hold the results for the requested data**, encapsulating all relevant information and outputs in a structured format.",
                          "properties": {
                            "respondentId": {
                              "type": "string",
                              "description": "A variable that **indicates the respondent**."
                            },
                            "status": {
                              "type": "string",
                              "description": "A variable that represents the **current state of the respondent evaluation**. For respondents who are still being processed, this value will always be `QUEUED`."
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Respondent Completed": {
                    "summary": "Respondent Completed Example",
                    "value": {
                      "success":true,
                      "message":"Respondent quality successfully retrieved",
                      "results": {
                        "respondentId": "RESP497770",
                        "status": "COMPLETED",
                        "respondentQuality": {
                          "isExcluded": true,
                          "reasonsForExclusion": ["Open Ended Score Threshold", "Coherence Score Threshold"],
                          "redemScore": 85,
                          "qualityScoreSummary": [
                            {"qualityCheck": "OES", "score": 80},
                            {"qualityCheck": "CHS", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                            {"qualityCheck": "GQS", "score": 85},
                            {"qualityCheck": "TS", "score": 70},
                            {"qualityCheck": "BAS", "score": 75}
                          ],
                          "dataPointsSummary": [
                            {"qualityCheck": "OES", "dataPointId": "Q1", "score": 85, "category": "VALID_ANSWER"},
                            {"qualityCheck": "TS", "dataPointId": "durationQ1", "score": 95},
                            {"qualityCheck": "GQS", "dataPointId": "Q2", "score": 90},
                            {"qualityCheck": "OES", "dataPointId": "Q3", "score": 75, "category": "VALID_ANSWER"},
                            {"qualityCheck": "TS", "dataPointId": "durationQ3", "score": 50},
                            {"qualityCheck": "CHS", "dataPointId": "CHS_Question", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                            {"qualityCheck": "GQS", "dataPointId": "Q4", "score": 80},
                            {"qualityCheck": "TS", "dataPointId": "totalDuration", "score": 65},
                            {"qualityCheck": "BAS", "dataPointId": "interactionsQ1", "score": 75, "category": "NATURAL_TYPING"}
                          ]
                        }
                      }
                    }
                  },
                  "Respondent Processing": {
                    "summary": "Respondent Processing Example",
                    "value": {
                      "success":true,
                      "message":"Respondent quality successfully retrieved",
                      "results":{
                        "respondentId": "RESP497770",
                        "status": "QUEUED"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "When a request fails due to invalid input or other errors, the API returns a 400 Bad Request status code. The response includes a descriptive `message` explaining the issue and an `error` object containing additional details to aid in diagnosing and resolving the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Validation Error",
                      "description": "Indicating a validation failure, the response includes a `message` field specifying the issue and an `errors` object listing the missing or incorrect fields to help clients resolve them. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.", 
                      "type": "object"
                    },
                    {
                      "title": "Survey not found",
                      "description": "This error occurs when the **requested survey does not exist in the system**. It may happen if the survey name is incorrect, has been deleted, or was never created. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    },
                    {
                      "title": "Respondent not found",
                      "description": "This error occurs when the **requested respondentId does not exist in the system**. It may happen if the respondent has not been added to the specified survey or if an incorrect ID was provided. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Validation Error": {
                    "value": {
                      "success":false,
                      "message":"Validation Error",
                      "errors":{
                        "0": "\"surveyName\" is required",
                        "1": "\"respondentId\" is required"
                      }
                    }
                  },
                  "Survey not found": {
                    "value": {
                      "success":false,
                      "message":"Survey not found",
                      "errors":{}
                    }
                  },
                  "Respondent not found": {
                    "value": {
                      "success":false,
                      "message":"Respondent not found",
                      "errors":{}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/getAllRespondents": {
      "post": {
        "tags": [
          "Respondent"
        ],
        "summary": "Get all respondents",
        "description": "Retrieve the quality check results and status for all respondents in a specific survey.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllRespondentsRequest"
              },
              "example": {
                "surveyName": "Global Vacation Insights 2024"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When a request is successfully processed, the API responds with a `200 OK` status code and the expected data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success":{
                      "type":"boolean",
                      "description":"A variable indicating whether the **operation was successful**.",
                      "enum":[true,false]
                    },
                    "message":{
                      "type":"string",
                      "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                    },
                    "results": {
                      "type": "array",
                      "description": "This variable includes **all quality parameters associated with a respondent**.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "respondentId": {
                            "type": "string",
                            "description": "**The unique identifier for a respondent**, making it easy to distinguish them from others in the survey.",
                            "example": "RESP497770"
                          },
                          "status": {
                            "type": "string",
                            "description": "A variable that **indicates the current state of the respondent**. \n\n **ðŸ’¡Important:** Even if a respondent fails evaluation, the response status will still be `COMPLETED`. \n\n **â­• Note:** The value -999 is a predefined code returned by ReDem whenever a respondent cannot be evaluated. This applies to all quality scores, including ReDem Score (R-Score), OES, GQS, CHS, TS, and BAS.",
                            "enum": ["COMPLETED", "QUEUED"]
                          },
                          "respondentQuality": {
                            "description": "This variable **represents respondent data that has been evaluated according to the quality checks specified in the /addRespondent request**. \n\n **â­• Note:** this variable will only available if the respondent status is `COMPLETED`.",
                            "$ref": "#/components/schemas/RespondentResults"
                          }
                        }
                      }

                    }
                  }
                },
                "example": {
                  "success":true,
                  "message":"Respondents quality retrieved successfully",
                  "results": [
                    { 
                      "respondentId": "RESP497770",
                      "status": "COMPLETED",
                      "respondentQuality": {
                        "isExcluded": false,
                        "reasonsForExclusion": ["Open Ended Score Threshold", "Coherence Score Threshold"],
                        "redemScore": 85,
                        "dataPointsSummary": [
                          {"qualityCheck": "OES", "dataPointId": "Q1", "score": 85, "category": "VALID_ANSWER"},
                          {"qualityCheck": "TS", "dataPointId": "durationQ1", "score": 95},
                          {"qualityCheck": "GQS", "dataPointId": "Q2", "score": 90},
                          {"qualityCheck": "OES", "dataPointId": "Q3", "score": 75, "category": "VALID_ANSWER"},
                          {"qualityCheck": "TS", "dataPointId": "durationQ3", "score": 50},
                          {"qualityCheck": "CHS", "dataPointId": "CHS_Question", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                          {"qualityCheck": "GQS", "dataPointId": "Q4", "score": 80},
                          {"qualityCheck": "TS", "dataPointId": "totalDuration", "score": 65}
                        ],
                        "qualityScoreSummary": [
                          {"qualityCheck": "OES", "score": 80},
                          {"qualityCheck": "CHS", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                          {"qualityCheck": "GQS", "score": 85},
                          {"qualityCheck": "TS", "score": 70}
                        ]
                      }
                    },
                    { "respondentId": "RESP497771", "status": "PROCESSING" },
                    { "respondentId": "RESP497772", "status": "PROCESSING" },
                    { 
                      "respondentId": "RESP497773",
                      "status": "COMPLETED",
                      "respondentQuality": {
                        "isExcluded": false,
                        "reasonsForExclusion": [],
                        "redemScore": -999,
                        "dataPointsSummary": [
                          {"qualityCheck": "OES", "dataPointId": "Q1", "score": -999, "category": "N/A"},
                          {"qualityCheck": "TS", "dataPointId": "durationQ1", "score": -999},
                          {"qualityCheck": "GQS", "dataPointId": "Q2", "score": -999},
                          {"qualityCheck": "OES", "dataPointId": "Q3", "score": -999, "category": "N/A"},
                          {"qualityCheck": "TS", "dataPointId": "durationQ3", "score": -999},
                          {"qualityCheck": "CHS", "dataPointId": "CHS_Question", "score": -999, "reason": "N/A"},
                          {"qualityCheck": "GQS", "dataPointId": "Q4", "score": -999},
                          {"qualityCheck": "TS", "dataPointId": "totalDuration", "score": -999}
                        ],
                        "qualityScoreSummary": [
                          {"qualityCheck": "OES", "score": -999},
                          {"qualityCheck": "CHS", "score": -999, "reason": "N/A"},
                          {"qualityCheck": "GQS", "score": -999},
                          {"qualityCheck": "TS", "score": -999}
                        ]
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "When a request fails due to invalid input or other errors, the API returns a 400 Bad Request status code. The response includes a descriptive `message` explaining the issue and an `error` object containing additional details to aid in diagnosing and resolving the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Validation Error",
                      "description": "Indicating a validation failure, the response includes a `message` field specifying the issue and an `errors` object listing the missing or incorrect fields to help clients resolve them. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.", 
                      "type": "object"
                    },
                    {
                      "title": "Survey not found",
                      "description": "This error occurs when the **requested survey does not exist in the system**. It may happen if the survey name is incorrect, has been deleted, or was never created. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Validation Error": {
                    "value": {
                      "success":false,
                      "message":"Validation Error",
                      "errors":{
                        "0": "\"surveyName\" is required"
                      }
                    }
                  },
                  "Survey not found": {
                    "value": {
                      "success":false,
                      "message":"Survey not found",
                      "errors":{}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/stopSurvey": {
      "post": {
        "tags": [
          "Survey"
        ],
        "summary": "Stop a survey",
        "operationId": "stopSurvey",
        "description": "API endpoint for stopping a survey. This can be triggered once the survey is completed.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllRespondentsRequest"
              },
              "example": {
                "surveyName": "Global Vacation Insights 2024"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Upon successful processing, the API returns a 200 OK status code along with the expected data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success":{
                      "type":"boolean",
                      "description":"A variable indicating whether the **operation was successful**.",
                      "enum":[true,false]
                    },
                    "message":{
                      "type":"string",
                      "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                    },
                    "results": {
                      "type": "object",
                      "description": "This object serves as a **container to hold the results for the requested data**, encapsulating all relevant information and outputs in a structured format.",
                      "properties": {
                        "surveyName": {
                          "type": "string",
                          "description": "A variable that **indicates the survey name**."
                        },
                        "status": {
                          "type": "string",
                          "description": "A variable that **indicates the status of the survey**. \n\n **â­• Note:** ReDem surveys have two possible statuses: `RUNNING` and `STOPPED`. The survey status will be updated to `STOPPED` once the survey is stopped."
                        }
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "message": "Survey successfully stopped",
                  "results": {
                    "surveyName": "Global Vacation Insights 2024",
                    "status": "STOPPED"
                  }
                }
              }
            }
          },
          "400": {
            "description": "When a request fails due to invalid input or other errors, the API returns a 400 Bad Request status code. The response includes a descriptive `message` explaining the issue and an `error` object containing additional details to aid in diagnosing and resolving the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Validation Error",
                      "description": "Indicating a validation failure, the response includes a `message` field specifying the issue and an `errors` object listing the missing or incorrect fields to help clients resolve them. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.", 
                      "type": "object"
                    },
                    {
                      "title": "Survey not found",
                      "description": "This error occurs when the **requested survey does not exist in the system**. It may happen if the survey name is incorrect, has been deleted, or was never created. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Validation Error": {
                    "value": {
                      "success":false,
                      "message":"Validation Error",
                      "errors":{
                        "0": "\"surveyName\" is required"
                      }
                    }
                  },
                  "Survey not found": {
                    "value": {
                      "success":false,
                      "message":"Survey not found",
                      "errors":{}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v2/creditCalculation": {
      "post": {
        "tags": [
          "Respondent"
        ],
        "summary": "Calculate the maximum number of credits needed for a respondent",
        "operationId": "creditCalculation",
        "description": "API endpoint for calculating the required number of credits for a respondent.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreditCalculationRequest"
              },
              "example": {
                "OESDataPoints": 2,
                "GQSAnswers": 35,
                "TSDataPoints": 2,
                "CHSAnswers": 25,
                "BASDataPoints": 2
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When a request is successfully processed, the API returns a 200 OK status code along with the expected data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success":{
                      "type":"boolean",
                      "description":"A variable indicating whether the **operation was successful**.",
                      "enum":[true,false]
                    },
                    "message":{
                      "type":"string",
                      "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                    },
                    "results": {
                      "type": "object",
                      "description": "This object serves as a **container to hold the results for the requested data**, encapsulating all relevant information and outputs in a structured format.",
                      "properties": {
                        "creditCalculation": {
                          "description": "This variable **represents the detailed breakdown of the number of credits** calculated for a respondent.",
                          "type": "object",
                          "properties": {
                            "totalCredits": {
                              "type": "number",
                              "description": "This variable **represents the total number of credits** calculated for a respondent."
                            },
                            "calculationBreakdown": {
                              "description": "This variable **represents the detailed breakdown of the number of credits** calculated for a respondent.",
                              "$ref": "#/components/schemas/CalculationBreakdown"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "message": "Credit calculation successfully retrieved",
                  "results": {
                    "creditCalculation": {
                      "totalCredits": 12,
                      "calculationBreakdown": {
                        "OES": {"credits": 4, "dataPoints": 2},
                        "GQS": {"credits": 3, "answers": 35},
                        "TS": {"credits": 1, "dataPoints": 2},
                        "CHS": {"credits": 4, "answers": 25},
                        "BAS": {"credits": 4, "dataPoints": 2}
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "When a request fails due to invalid input or other errors, the API returns a 400 Bad Request status code. The response includes a descriptive `message` explaining the issue and an `error` object containing additional details to aid in diagnosing and resolving the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Validation Error",
                      "description": "Indicating a validation failure, the response includes a `message` field specifying the issue and an `errors` object listing the missing or incorrect fields to help clients resolve them. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.", 
                      "type": "object"
                    },
                    {
                      "title": "Failed to calculate credits",
                      "description": "This error occurs when the **system fails to calculate the credits**. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Validation Error": {
                    "value": {
                      "success":false,
                      "message":"Validation Error",
                      "errors":{
                        "0": "\"OESDataPoints\" is required",
                        "1": "\"GQSAnswers\" is required",
                        "2": "\"TSDataPoints\" is required",
                        "3": "\"CHSAnswers\" is required",
                        "4": "\"BASDataPoints\" is required"
                      }
                    }
                  },
                  "Failed to calculate credits": {
                    "value": {
                      "success":false,
                      "message":"Failed to calculate credits",
                      "errors":{}
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}