{
  "openapi": "3.0.1",
  "info": {
    "title": "API Documentation",
    "description": "API Documentation for Redem 3.0",
    "version": "1.0.0",
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "url": "https://live-api.beta.redem.io/"
    }
  ],
  "security": [
    {
      "apiKeyAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key"
      }
    },
    "schemas": {
      "InterviewData": {
        "description": "Structure for interview-based questions",
        "type": "object",
        "required": [
          "question",
          "answer"
        ],
        "properties": {
          "question": {
            "type": "string",
            "description": "**Contains the title or text of the question**.",
            "example": "What type of accommodation did you stay in?"
          },
          "answer": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "description": "A variable that holds the **respondent's answer for the question**.",
            "example": "Hotel"
          }
        }
      },
      "InteractionData": {
        "description": "Structure for interaction-based questions",
        "type": "object",
        "required": ["value", "interactionType", "timestamp"],
        "properties": {
          "value": { 
            "type": "string",
            "description": "The value of the interaction, which should include the final value once the interaction is complete."
          },
          "interactionType": { 
            "type": "string",
            "description": "The type of interaction the respondent had with the data point. \n\n â­• **Note:** Currently, only `KEYSTROKE` interactions are supported. In the future, support for interactions such as mouse clicks, mouse movements, and others will be added.",
            "enum": ["KEYSTROKE"]
          },
          "timestamp": { 
            "type": "string",
            "description": "The timestamp of the interaction. The timestamp is in the format `YYYY-MM-DDTHH:MM:SS.SSSZ`."
          }
        }
      },
      "DataPoint": {
        "description": "An array of data points that are used for quality checks for each respondent.",
        "type": "object",
        "oneOf": [
          {
            "title": "OES",
            "properties": {
              "qualityCheck": {
                "type": "string",
                "description": "A variable that **specifies the type of quality check applied to the data point**, determining how it will be assessed and evaluated.",
                "enum": ["OES"]
              },
              "dataPointId": {
                "type": "string",
                "description": "**A unique identifier assigned to each data point**, ensuring that every data point is distinctly tracked and referenced within the system.",
                "example": "Q1"
              },
              "question": {
                "type": "string",
                "description": "**Contains the title or text of the open-ended question**, which is used directly to evaluate respondent quality.  \n\n This variable is required only when the quality check type is set to `OES`. For all other quality check types, it will be ignored, even if provided.",
                "example": "Where did you spend your last vacation?"
              },
              "answer": {
                "type": "string",
                "description": "A variable that holds the **respondent's answer to an open-ended question**, which is the main part we use for evaluation. \n\n This variable is required only when the quality check type is set to `OES`. For all other quality check types, it will be ignored, even if provided.",
                "example": "We were at Lake Garda in Italy"
              },
              "keywords": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "**Keywords are used to perform `wrong topic` checks** and help evaluate whether responses are relevant to the topic. \n\nBy default, the `wrong topic` check is disabled. However, if keywords are provided, the system will automatically enable the `wrong topic` check, and respondents will be evaluated to ensure their answers align with the context defined by the provided keywords and title. \n\n For more details on how this works, refer to the [Wrong Topic Check](/quality-checks/open-ended-score#wrong-topic) section.",
                "example": [
                  "Beach",
                  "Mountains",
                  "Lake"
                ]
              },
              "activateDuplicateDetection": {
                "type": "boolean",
                "description": "A variable that indicates **whether duplicate checks are performed on the respondent's answers**. \n\n This checks if an answer is identical to another respondent's answer or if a respondent provided the same answer to multiple questions. \n\n By default, duplicate checks are active, but you can deactivate them by setting this variable to `false`. \n\n For more details on how this works, refer to the [Duplicate Check](/quality-checks/open-ended-score#duplicate-respondent) section.",
                "example": true,
                "default": true
              },
              "allowedLanguages": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "**Specifies the list of languages allowed for responses**. Answers provided in languages not on this list will be marked as `wrong language`. \n\n If no languages are specified, the wrong language check will not be performed. \n\n For more details on how this works, refer to the [Wrong Language Check](/quality-checks/open-ended-score#wrong-language) section.",
                "example": ["en", "de", "it"]
              }
            },
            "required": ["dataPointId", "qualityCheck","answer", "question"]
          },
          {
            "title": "TS",
            "properties": {
              "qualityCheck": {
                "type": "string",
                "description": "A variable that **specifies the type of quality check applied to the data point**, determining how it will be assessed and evaluated.",
                "enum": ["TS"]
              },
              "dataPointId": {
                "type": "string",
                "description": "**A unique identifier assigned to each data point**, ensuring that every data point is distinctly tracked and referenced within the system.",
                "example": "Q1"
              },
              "duration": {
                "type": "number",
                "description": "This variable contains the information about the **amount of time a respondent spends on each question or a specific section of the survey**. It helps in analyzing response behavior and timing.",
                "example": 42670
              }
            },
            "required": ["dataPointId", "qualityCheck", "duration"]
          },
          {
            "title": "GQS",
            "properties": {
              "qualityCheck": {
                "type": "string",
                "description": "A variable that **specifies the type of quality check applied to the data point**, determining how it will be assessed and evaluated.",
                "enum": ["GQS"]
              },
              "dataPointId": {
                "type": "string",
                "description": "**A unique identifier assigned to each data point**, ensuring that every data point is distinctly tracked and referenced within the system.",
                "example": "Q1"
              },
              "gridAnswersPattern": {
                "type": "array",
                "items": {
                  "type": "number"
                },
                "description": "A variable that contains all the **answers provided by a specific respondent for a particular grid question**. \n\n ðŸ§ª **Validations:**  \n - A **minimum of 7** and a **maximum of 50** answers are allowed for each grid question. \n - Each answer must be provided as a **numeric value**.",
                "example": [
                  5,
                  4,
                  3,
                  5,
                  4
                ]
              }
            },
            "required": ["dataPointId", "qualityCheck", "gridQuestionPattern"]
          },
          {
            "title": "CHS",
            "properties": {
              "qualityCheck": {
                "type": "string",
                "description": "A variable that **specifies the type of quality check applied to the data point**, determining how it will be assessed and evaluated.",
                "enum": ["CHS"]
              },
              "dataPointId": {
                "type": "string",
                "description": "**A unique identifier assigned to each data point**, ensuring that every data point is distinctly tracked and referenced within the system. Note that there can be only one CHS datapoint per respondent. This datapoint should contain the entire interview.",
                "example": "Q1"
              },
              "interviewData": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InterviewData"
                },
                "description": "This variable compiles all relevant questions and answer pairs used to assess whether a respondent is coherent or incoherent. \n\n ðŸ§ª **Validations:**  \n - A **maximum of 1000** interviews are allowed per respondent.",
                "example": [
                  {
                    "question": "What type of accommodation did you stay in?",
                    "answer": "Hotel"
                  }
                ]
              }
            },
            "required": ["dataPointId", "qualityCheck", "interviewData"]
          },
          {
            "title": "BAS",
            "properties": {
              "qualityCheck": {
                "type": "string",
                "description": "A variable that **specifies the type of quality check applied to the data point**, determining how it will be assessed and evaluated.",
                "enum": ["BAS"]
              },
              "dataPointId": {
                "type": "string",
                "description": "**A unique identifier assigned to each data point**, ensuring that every data point is distinctly tracked and referenced within the system.",
                "example": "Q1"
              },
              "interactionData": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InteractionData"
                },
                "description": "This variable compiles all relevant information about the interaction of the respondent with the data point.",
                "example": [
                  {
                    "value": "W",
                    "interactionType": "keystroke",
                    "timestamp": "2024-12-01T06:22:59.833Z"
                  }
                ]
              }
            },
            "required": ["dataPointId", "qualityCheck", "interviewData"]
          }
        ],
        "properties": {}
      },
      "AddRespondentRequest": {
        "description": "Request body for adding a new respondent",
        "required": [
          "respondentId",
          "projectName",
          "dataPoints"
        ],
        "type": "object",
        "properties": {
          "respondentId": {
            "type": "string",
            "description": "**The unique identifier for a respondent**, making it easy to distinguish them from others in the survey.\n\n**ðŸ’¡ Important:** The system uses this ID, along with the survey name, to uniquely identify the respondent within a survey, making it possible for the same respondent to be part of different projects. \n\nIf the combination of survey name and respondent ID already exists, an error will be displayed with **Error Status 409**",
            "example": "RESP497770"
          },
          "surveyName": {
            "type": "string",
            "description": "**The name of the survery**, which helps identify different surveys. \n\n**ðŸ’¡Important:** If the survey name already exists, the system will add the respondent under the appropriate survey. If the survey name is new, a new survey will be created, and the respondent will be added to the new survey. \n\n **â­• Note:** Each survey identifier must be unique for a given user.",
            "example": "Global Vacation Insights 2024"
          },
          "dataPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataPoint"
            },
            "description": "An array of data points that are used for quality checks for each respondent. Note that for the Coherence Score (CHS), there can only be one data point. This data point should contain the entire interview.\n\n ðŸ§ª **Validations:** \n - A **maximum of 10** `OES` data points are allowed per respondent. \n - A **maximum of 100** `TS` data points are allowed per respondent. \n - A **maximum of 20** `GQS` data points are allowed per respondent. \n - A **maximum of 1** `CHS` data point is allowed per respondent. \n\n Exceeding these limits will result in validation errors. Ensure data points per respondent stay within the limits. \n\nðŸ’¡ **Important:** The `Behavioral Analytics Score (BAS)` quality check type is not currently available like other quality checks. We are in the process of developing this quality check. For now, this variable is being used to collect interaction data. The Behavioral Analytics Score (BAS) will be available in the near future."
          },
          "activateCleaning": {
            "type": "boolean",
            "description": "**Indicates whether cleaning should be applied to the respondent**. \n\n **ðŸ’¡Important:** To clean respondents, ensure that this variable is set to `true`. Without this setting, the system will evaluate respondents, generate scores, and always mark them as included. \n\n When cleaning is activated, the response will include a variable, isExcluded, indicating whether the respondent has been excluded based on the applied criteria.",
            "example": true,
            "default": false
          },
          "cleaningSettings": {
            "description": "**Cleaning settings for respondents** define the rules for deciding if a respondent should be excluded and marked as low quality. \n\n **ðŸ’¡Important:** If no cleaning settings are defined and cleaning is activated, the system will apply the default cleaning settings to determine whether a respondent should be excluded and marked as low quality. \n \n For more details on how cleaning works, refer to the [Data Cleaning](/cleaning-and-review) section.",
            "$ref": "#/components/schemas/CleaningSettings"
          },
          "synchronousResponse": {
            "type": "boolean",
            "description": "**Indicates whether the response should be processed synchronously**. \n\n Set this to `true` if you need to wait for the response immediately. If you don't need to wait, set it to `false` and use the [Get Respondent Status endpoint](/api-reference/endpoint/getRespondentStatus) later to check the status of the respondent.",
            "example": true,
            "default": true
          }
        }
      },
      "DataPointsQualityResponse": {
        "description": "Quality check results for a single datapoint",
        "type": "object",
        "properties": {
          "qualityCheck": {
            "type": "string",
            "enum": [
              "OES",
              "TS",
              "GQS",
              "CHS"
            ],
            "description": "**Type of quality check** performed for the data point",
            "example": "OES"
          },
          "dataPointId": {
            "type": "string",
            "description": "**A unique identifier of the data point**",
            "example": "Q1"
          },
          "score": {
            "type": "number",
            "description": "**Quality score for the data point**, ranging from 0 to 100",
            "example": 85
          },
          "category": {
            "type": "string",
            "description": "**Quality category** for the data point, this will be only available if the quality check type is set to `OES`",
            "example": "Valid Answer"
          },
          "reason": {
            "type": "string",
            "description": "**Explanation** for the score, this will be only available if the quality check type is set to `CHS`",
            "example": "The user shows several inconsistencies and contradictions, such as different ..."
          }
        }
      },
      "QualityCheckResponse": {
        "description": "Aggregated results for a quality check type",
        "type": "object",
        "properties": {
          "qualityCheck": {
            "type": "string",
            "enum": [
              "OES",
              "TS",
              "GQS",
              "CHS"
            ],
            "description": "**Type of quality check** performed on a respondent",
            "example": "OES"
          },
          "score": {
            "type": "number",
            "description": "A numerical **score ranging from 0 to 100** that represents the outcome of a specific quality check",
            "example": 78
          },
          "reason": {
            "type": "string",
            "description": "**Reason for the score**, this will be only available if the quality check type is set to `CHS`",
            "example": "The user shows several inconsistencies and contradictions, such as different ..."
          }
        }
      },
      "RespondentResults": {
        "description": "Complete quality assessment for a respondent",
        "type": "object",
        "properties": {
          "isExcluded": {
            "type": "boolean",
            "description": "**Indicates whether a respondent is excluded based on the cleaning settings specified in the request**. If cleaning is not activated, the respondent is always included by default.",
            "example": false
          },
          "reasonsForExclusion": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "**Reasons for exclusion** will only be available if the respondent is excluded based on the cleaning settings specified in the request. If the respondent is not excluded, the array will be empty."
          },
          "redemScore": {
            "type": "number",
            "description": "**The respondent's overall evaluation score**, ranging from 0 to 100, based on ReDem's quality checks. \n\n For more information refer to the [ReDem Score](/quality-checks/redem-score) section.",
            "example": 85
          },
          "qualityScoreSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QualityCheckResponse"
            },
            "description": "An object containing detailed results for each quality check applied"
          },
          "dataPointsSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataPointsQualityResponse"
            },
            "description": "Detailed results of quality checks performed at the individual data point level."
          }
        }
      },
      "AddSurveyRequest": {
        "description": "Request body for creating or customizing a survey",
        "required": [
          "surveyName",
          "cleaningSettings",
          "reviewSettings"
        ],
        "type": "object",
        "properties": {
          "projectName": {
            "type": "string",
            "description": "Optional survey name for grouping surveys",
            "example": "customer-satisfaction-2024"
          },
          "surveyName": {
            "type": "string",
            "description": "Unique identifier for the survey",
            "example": "customer-survey-2024"
          },
          "cleaningSettings": {
            "$ref": "#/components/schemas/CleaningSettings",
            "example": {
              "ReDemSettings": true,
              "CustomSettings": {
                "redemScore": 80,
                "qualityChecks": [
                  {
                    "type": "OES",
                    "score": 70,
                    "minimumAnswers": 5
                  }
                ]
              }
            }
          },
          "reviewSettings": {
            "$ref": "#/components/schemas/CleaningSettings",
            "example": {
              "ReDemSettings": false,
              "OESCategories": {
                "validAnswers": true,
                "genericAnswers": true,
                "noInformation": true
              }
            }
          }
        }
      },
      "CleaningSettings": {
        "description": "Configuration for data cleaning and review process",
        "type": "object",
        "properties": {
          "redemScore": {
            "type": "number",
            "description": "Minimum acceptable ReDem score (0-100)",
            "example": 80
          },
          "OES": {
            "type": "object",
            "properties": {
              "score": {
                "type": "number",
                "description": "Minimum score threshold for OES checks",
                "example": 60
              },
              "minDataPoints": {
                "type": "number",
                "description": "Minimum number of data points required",
                "example": 2
              },
              "categories": {
                "type": "object",
                "properties": {
                  "genericAnswers": {
                    "type": "object",
                    "properties": {
                      "exclude": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "noInformation": {
                    "type": "object",
                    "properties": {
                      "exclude": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "badLanguage": {
                    "type": "object",
                    "properties": {
                      "exclude": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "nonsense": {
                    "type": "object",
                    "properties": {
                      "exclude": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "duplicateAnswer": {
                    "type": "object",
                    "properties": {
                      "exclude": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "duplicateRespondent": {
                    "type": "object",
                    "properties": {
                      "exclude": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "wrongTopic": {
                    "type": "object",
                    "properties": {
                      "exclude": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "wrongLanguage": {
                    "type": "object",
                    "properties": {
                      "exclude": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "copyPastAnswer": {
                    "type": "object",
                    "properties": {
                      "exclude": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "fakeAnswer": {
                    "type": "object",
                    "properties": {
                      "exclude": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  }
                }
              }
            }
          },
          "CHS": {
            "type": "object",
            "properties": {
              "score": {
                "type": "number",
                "description": "Minimum score threshold for CHS checks",
                "example": 50
              }
            }
          },
          "GQS": {
            "type": "object",
            "properties": {
              "score": {
                "type": "number",
                "description": "Minimum score threshold for GQS checks",
                "example": 40
              },
              "minDataPoints": {
                "type": "number",
                "description": "Minimum number of data points required",
                "example": 2
              }
            }
          },
          "TS": {
            "type": "object",
            "properties": {
              "score": {
                "type": "number",
                "description": "Minimum score threshold for TS checks",
                "example": 20
              }
            }
          }
        }
      },
      "EstimateRespondentRequest": {
        "description": "Request body for estimating the maximum number of credits needed for a respondent",
        "required": [
          "OESDataPoints",
          "GQSAnswers",
          "TSDataPoints",
          "CHSInterviews"
        ],
        "type": "object",
        "properties": {
          "OESDataPoints": {
            "type": "number",
            "description": "**Number of OES data points** that need to consider for quality checks"
          },
          "GQSAnswers": {
            "type": "number",
            "description": "**Number of GQS answers** that need to consider for quality checks"
          },
          "TSDataPoints": {
            "type": "number",
            "description": "**Number of TS data points** that need to consider for quality checks"
          },
          "CHSInterviews": {
            "type": "number",
            "description": "**Number of CHS interviews** that need to consider for quality checks"
          }
        }
      },
      "EstimationBreakdown": {
        "description": "Detailed breakdown of the number of credits estimated for a respondent",
        "type": "object",
        "properties": {
          "OES": {
            "type": "object",
            "description": "Detailed breakdown of the number of OES credits estimated for a respondent",
            "properties": {
              "credits": {
                "type": "number",
                "description": "Number of OES credits estimated for a respondent"
              },
              "dataPoints": {
                "type": "number",
                "description": "Number of OES data points estimated for a respondent"
              }
            }
          },
          "GQS": {
            "type": "object",
            "description": "Detailed breakdown of the number of GQS credits estimated for a respondent",
            "properties": {
              "credits": {
                "type": "number",
                "description": "Number of GQS credits estimated for a respondent"
              },
              "answers": {
                "type": "number",
                "description": "Number of GQS answers estimated for a respondent"
              }
            }
          },
          "TS": {
            "type": "object",
            "description": "Detailed breakdown of the number of TS credits estimated for a respondent",
            "properties": {
              "credits": {
                "type": "number",
                "description": "Number of TS credits estimated for a respondent"
              },
              "dataPoints": {
                "type": "number",
                "description": "Number of TS data points estimated for a respondent"
              }
            }
          },
          "CHS": {
            "type": "object",
            "description": "Detailed breakdown of the number of CHS credits estimated for a respondent",
            "properties": {
              "credits": {
                "type": "number",
                "description": "Number of CHS credits estimated for a respondent"
              },
              "interviews": {
                "type": "number",
                "description": "Number of CHS interviews estimated for a respondent"
              }
            }
          }
        }
      }
    },
    "responses": {
      "ValidationError": {
        "description": "Validation Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "VALIDATION_ERROR"
                }
              }
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Unauthorized Access",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UNAUTHORIZED"
                }
              }
            }
          }
        }
      },
      "DuplicateError": {
        "description": "Duplicate Respondent Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "DUPLICATE_RESPONDENT"
                }
              }
            }
          }
        }
      },
      "ServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      },
      "ProjectNotFoundError": {
        "description": "Project Not Found Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "PROJECT_NOT_FOUND"
                }
              }
            }
          }
        }
      },
      "RespondentNotFoundError": {
        "description": "Respondent Not Found Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "RESPONDENT_NOT_FOUND"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Survey",
      "description": "Survey management"
    },
    {
      "name": "Respondent",
      "description": "Respondent management"
    }
  ],
  "paths": {
    "/respondent/add": {
      "post": {
        "tags": [
          "Respondent"
        ],
        "summary": "Add a new respondent",
        "description": "API for adding a new respondent with quality check data",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRespondentRequest"
              },
              "example": {
                "respondentId": "RESP497770",
                "surveyName": "Global Vacation Insights 2024",
                "dataPoints": [
                  {
                    "qualityCheck": "OES",
                    "dataPointId": "Q1",
                    "question": "Where did you spend your last vacation?",
                    "answer": "We were at Lake Garda in Italy",
                    "keywords": ["Beach", "Mountains", "Lake", "Museums", "Europe", "Asia", "Destination"],
                    "activateDuplicateDetection": true,
                    "allowedLanguages": ["en", "de", "it"]
                  },
                  {
                    "qualityCheck": "TS",
                    "dataPointId": "durationQ1", 
                    "duration": 42670
                  },
                  {
                    "qualityCheck": "GQS",
                    "dataPointId": "Q2", 
                    "gridAnswersPattern": [7, 8, 9, 1, 3, 5, 2, 5, 9, 6] 
                  },
                  {
                    "qualityCheck": "OES",
                    "dataPointId": "Q3", 
                    "question": "What was the most memorable part of your last vacation?",
                    "answer": "Italian cuisine, especially pizza and fine wine.",
                    "keywords": ["Cuisine", "Food", "Art", "Adventure", "History", "Landscape", "Culture"],
                    "activateDuplicateDetection": true,
                    "allowedLanguages": ["en", "de", "it"]
                  },
                  {
                    "qualityCheck": "TS",
                    "dataPointId": "durationQ3", 
                    "duration": 69720
                  },
                  {
                    "qualityCheck": "CHS",
                    "dataPointId": "CHS_Question",
                    "interviewData": [
                      { "question": "What mode of transport did you use?", "answer": "Car" },
                      { "question": "How many days did you stay?", "answer": 5 }, 
                      { "question": "Did you travel with family?", "answer": "yes" },
                      { "question": "What was your approximate total budget for the trip (in EUR)?", "answer": 1500 },
                      { "question": "What type of accommodation did you stay in?", "answer": "Hotel" }
                    ]
                  },
                  {
                    "qualityCheck": "GQS",
                    "dataPointId": "Q4",
                    "gridAnswersPattern": [2, 1, 4, 3, 5, 2, 3, 1, 1, 1] 
                  },
                  {
                    "qualityCheck": "TS",
                    "dataPointId": "totalDuration",
                    "duration": 256843
                  },
                  {
                    "qualityCheck": "BAS",
                    "dataPointId": "interactionsQ1",
                    "interactionData": [
                      { "value": "W", "interactionType": "KEYSTROKE", "timestamp": "2024-12-01T06:22:59.809Z" },
                      { "value": "We", "interactionType": "KEYSTROKE", "timestamp": "2024-12-01T06:22:59.833Z" },
                      { "value": "We ", "interactionType": "KEYSTROKE", "timestamp": "2024-12-01T06:22:59.909Z" },
                      { "value": "We w", "interactionType": "KEYSTROKE", "timestamp": "2024-12-01T06:22:59.962Z" },
                      { "value": "We we", "interactionType": "KEYSTROKE", "timestamp": "2024-12-01T06:23:00.024Z" },
                      { "value": "We were", "interactionType": "KEYSTROKE", "timestamp": "2024-12-01T06:23:00.086Z" },
                      { "value": "We were ", "interactionType": "KEYSTROKE", "timestamp": "2024-12-01T06:23:00.148Z" },
                      { "value": "We were a", "interactionType": "KEYSTROKE", "timestamp": "2024-12-01T06:23:00.210Z" },
                      { "value": "We were at", "interactionType": "KEYSTROKE", "timestamp": "2024-12-01T06:23:00.272Z" }
                    ]
                  }
                ],
                "activateCleaning": true,
                "cleaningSettings": {
                  "redemScore": 60,
                  "OES": {
                    "score": 30,
                    "minimumAnswers": 2,
                    "categories": {
                      "genericAnswers": {"exclude":true, "minDataPoints": 2},
                      "noInformation": {"exclude":true, "minDataPoints": 2},
                      "badLanguage": {"exclude":true, "minDataPoints": 2},
                      "nonsense": {"exclude":true, "minDataPoints": 1},
                      "duplicateAnswer": {"exclude":true, "minDataPoints": 1},
                      "duplicateRespondent": {"exclude":true, "minDataPoints": 1},
                      "wrongTopic": {"exclude":true, "minDataPoints": 1},
                      "wrongLanguage": {"exclude":true, "minDataPoints": 1},
                      "copyPastAnswer": {"exclude":true, "minDataPoints": 1},
                      "fakeAnswer": {"exclude":true, "minDataPoints": 1}
                    }
                  },
                  "CHS": {
                    "score": 20
                  },
                  "GQS": {
                    "score": 10,
                    "minimumItems": 15
                  },
                  "TS": {
                    "score": 20
                  }
                },
                "synchronousResponse": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Synchronous Response",
                      "description": "**Synchronous Response** \n\nThis response mode is triggered when `synchronousResponse` is set to `true`. \n\n In this case, the system generates a comprehensive, detailed response and processes it synchronously, meaning the request will wait (`await`) until the complete response is ready before proceeding. This ensures the delivery of in-depth information in real-time.",
                      "type": "object",
                      "properties": {
                        "success":{
                          "type":"boolean",
                          "description":"A variable that **indicates whether the operation was successful or not**.",
                          "enum":[true,false]
                        },
                        "message":{
                          "type":"string",
                          "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                        },
                        "results":{
                          "type":"object",
                          "description": "This object serves as a **container to hold the results for the requested data**, encapsulating all relevant information and outputs in a structured format.",
                          "properties":{
                            "status": {
                              "type": "string",
                              "description": "A variable that **indicates the current state of the job processing**.",
                              "enum": [
                                "JOB_COMPLETED", "JOB_FAILED"
                              ]
                            },
                            "respondentQuality": {
                              "$ref": "#/components/schemas/RespondentResults",
                              "description": "This variable represents **respondent data that has been evaluated according to the quality checks specified in the request**. \n\n **â­• Note:** If the respondent's status is `JOB_FAILED`, this variable will return `null`."
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "Asynchronous Response",
                      "description": "**Asynchronous Response** \n\nThis response mode is triggered when `synchronousResponse` is set to `false`. \n\n In this case, the system generates a detailed response and processes it asynchronously, meaning the request will not wait (`await`) for the evaluation to complete. Instead, the evaluation is performed in the background, and the status of the respondent can be retrieved later using the [Get Respondent Status](/api-reference/endpoint/getRespondentStatus) endpoint.",
                      "type": "object",
                      "properties": {
                        "success":{
                          "type":"boolean",
                          "description":"A variable that **indicates whether the operation was successful or not**.",
                          "enum":[true,false]
                        },
                        "message":{
                          "type":"string",
                          "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                        },
                        "results":{
                          "type":"object",
                          "description": "This object serves as a **container to hold the results for the requested data**, encapsulating all relevant information and outputs in a structured format.",
                          "properties":{
                            "status": {
                              "type": "string",
                              "description": "A variable that **indicates the current state of the job processing**.",
                              "enum": [
                                "JOB_PROCESSING"
                              ]
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Synchronous Response": {
                    "summary": "Synchronous Response Example",
                    "value": {
                      "success":true,
                      "message":"Respondent Evaluated successfully",
                      "results":{
                        "status": "JOB_COMPLETED",
                        "respondentQuality": {
                          "isExcluded": true,
                          "reasonsForExclusion": ["Open Ended Score Threshold", "Coherence Score Threshold"],
                          "redemScore": 85,
                          "qualityScoreSummary": [
                            {"qualityCheck": "OES", "score": 80},
                            {"qualityCheck": "CHS", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                            {"qualityCheck": "GQS", "score": 85},
                            {"qualityCheck": "TS", "score": 70}
                          ],
                          "dataPointsSummary": [
                            {"qualityCheck": "OES", "dataPointId": "Q1", "score": 85, "category": "Valid Answer"},
                            {"qualityCheck": "TS", "dataPointId": "durationQ1", "score": 95},
                            {"qualityCheck": "GQS", "dataPointId": "Q2", "score": 90},
                            {"qualityCheck": "OES", "dataPointId": "Q3", "score": 75, "category": "Valid Answer"},
                            {"qualityCheck": "TS", "dataPointId": "durationQ3", "score": 50},
                            {"qualityCheck": "CHS", "dataPointId": "CHS_Question", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                            {"qualityCheck": "GQS", "dataPointId": "Q4", "score": 80},
                            {"qualityCheck": "TS", "dataPointId": "totalDuration", "score": 65}
                          ]
                        }
                      }
                    }
                  },
                  "Asynchronously Response": {
                    "summary": "Asynchronous Response Example",
                    "value": {
                      "success":true,
                      "message":"Respondent Queued for Evaluation",
                      "results":{
                        "status": "JOB_PROCESSING"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/respondent/getRespondent/{surveyName}/{respondentId}": {
      "get": {
        "tags": [
          "Respondent"
        ],
        "summary": "Get respondent results",
        "description": "Get the quality check results and status for a specific respondent",
        "parameters": [
          {
            "name": "surveyName",
            "in": "path",
            "required": true,
            "description": "**The name of the survey**, which helps identify different surveys. \n\n If the survey name is not existing in the system, an error will be displayed with **Error Status 404**",
            "schema": {
              "type": "string",
              "example": "Global Vacation Insights 2024"
            }
          },
          {
            "name": "respondentId",
            "in": "path",
            "required": true,
            "description": "**The unique identifier for a respondent**, making it easy to distinguish them from others in the survey. \n\n If the combination of survey name and respondent ID does not exist, an error will be displayed with **Error Status 405**",
            "schema": {
              "type": "string",
              "example": "RESP497770"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Job Completed",
                      "description": "This response mode available when job status is `JOB_COMPLETED`. \n\n In this case, the system generates a comprehensive, quality assessment of the respondent.",
                      "type": "object",
                      "properties": {
                        "success":{
                          "type":"boolean",
                          "description":"A variable that **indicates whether the operation was successful or not**.",
                          "enum":[true,false]
                        },
                        "message":{
                          "type":"string",
                          "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                        },
                        "results": {
                          "type": "object",
                          "description": "This object serves as a **container to hold the results for the requested data**, encapsulating all relevant information and outputs in a structured format.",
                          "properties": {
                            "status": {
                              "type": "string",
                              "description": "A variable that **indicates the current state of the job**.",
                              "enum": [
                                "JOB_COMPLETED"
                              ]
                            },
                            "respondentQuality": {
                              "description": "This variable **represents respondent data that has been evaluated based on the quality checks specified in the respondent/add request**. \n\n **â­• Note:** this variable will only available if the job status is `JOB_COMPLETED`.",
                              "$ref": "#/components/schemas/RespondentResults"
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "Job Processing",
                      "description": "This response mode available when job status is `JOB_PROCESSING`. \n\n In this case, the system will only return the status of the job, without the quality assessment of the respondent.",
                      "type": "object",
                      "properties": {
                        "success":{
                          "type":"boolean",
                          "description":"A variable that **indicates whether the operation was successful or not**.",
                          "enum":[true,false]
                        },
                        "message":{
                          "type":"string",
                          "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                        },
                        "results": {
                          "type": "object",
                          "description": "This object serves as a **container to hold the results for the requested data**, encapsulating all relevant information and outputs in a structured format.",
                          "properties": {
                            "status": {
                              "type": "string",
                              "description": "A variable that **indicates the current state of the job**.",
                              "enum": [
                                "JOB_PROCESSING"
                              ]
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "Job Failed",
                      "description": "This response mode available when job status is `JOB_FAILED`. \n\n In this case, the system will only return the status of the job, without the quality assessment of the respondent.",
                      "type": "object",
                      "properties": {
                        "success":{
                          "type":"boolean",
                          "description":"A variable that **indicates whether the operation was successful or not**.",
                          "enum":[true,false]
                        },
                        "message":{
                          "type":"string",
                          "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                        },
                        "results": {
                          "type": "object",
                          "description": "This object serves as a **container to hold the results for the requested data**, encapsulating all relevant information and outputs in a structured format.",
                          "properties": {
                            "status": {
                              "type": "string",
                              "description": "A variable that **indicates the current state of the job**.",
                              "enum": [
                                "JOB_FAILED"
                              ]
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Job Completed": {
                    "summary": "Job Completed Example",
                    "value": {
                      "success":true,
                      "message":"Respondent quality retrieved successfully",
                      "results":{
                        "status": "JOB_COMPLETED",
                        "qualityAssessment": {
                          "isExcluded": false,
                          "reasonsForExclusion": ["Open Ended Score Threshold", "Coherence Score Threshold"],
                          "redemScore": 85,
                          "qualityScoreSummary": [
                            {"qualityCheck": "OES", "score": 80},
                            {"qualityCheck": "CHS", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                            {"qualityCheck": "GQS", "score": 85},
                            {"qualityCheck": "TS", "score": 70}
                          ],
                          "dataPointsSummary": [
                            {"qualityCheck": "OES", "dataPointId": "Q1", "score": 85, "category": "Valid Answer"},
                            {"qualityCheck": "TS", "dataPointId": "durationQ1", "score": 95},
                            {"qualityCheck": "GQS", "dataPointId": "Q2", "score": 90},
                            {"qualityCheck": "OES", "dataPointId": "Q3", "score": 75, "category": "Valid Answer"},
                            {"qualityCheck": "TS", "dataPointId": "durationQ3", "score": 50},
                            {"qualityCheck": "CHS", "dataPointId": "CHS_Question", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                            {"qualityCheck": "GQS", "dataPointId": "Q4", "score": 80},
                            {"qualityCheck": "TS", "dataPointId": "totalDuration", "score": 65}
                          ]
                        }
                      }
                    }
                  },
                  "Job Processing": {
                    "summary": "Job Processing Example",
                    "value": {
                      "success":true,
                      "message":"Respondent quality retrieved successfully",
                      "results":{
                        "status": "JOB_PROCESSING"
                      }
                    }
                  },
                  "Job Failed": {
                    "summary": "Job Failed Example",
                    "value": {
                      "success":true,
                      "message":"Respondent quality retrieved successfully",
                      "results":{
                        "status": "JOB_FAILED"
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/respondent/getAllRespondents/{surveyName}": {
      "get": {
        "tags": [
          "Respondent"
        ],
        "summary": "Get all respondents",
        "description": "Get quality check results and status for all respondents in a specific survey",
        "parameters": [
          {
            "name": "surveyName",
            "in": "path",
            "required": true,
            "description": "**The name of the survey**, which helps identify different surveys. \n\n If the survey name is not existing in the system, an error will be displayed with **Error Status 404**",
            "schema": {
              "type": "string",
              "example": "Global Vacation Insights 2024"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success":{
                      "type":"boolean",
                      "description":"A variable that **indicates whether the operation was successful or not**.",
                      "enum":[true,false]
                    },
                    "message":{
                      "type":"string",
                      "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                    },
                    "results": {
                      "type": "array",
                      "description": "This is an array of objects, **each representing a respondent in the survey**.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "respondentId": {
                            "type": "string",
                            "description": "**The unique identifier for a respondent**, making it easy to distinguish them from others in the survey.",
                            "example": "RESP497770"
                          },
                          "status": {
                            "type": "string",
                            "description": "A variable that **indicates the current state of the job**.",
                            "enum": ["JOB_COMPLETED", "JOB_PROCESSING", "JOB_FAILED"]
                          },
                          "respondentQuality": {
                            "description": "This variable **represents respondent data that has been evaluated according to the quality checks specified in the respondent/add request**. \n\n **â­• Note:** this variable will only available if the job status is `JOB_COMPLETED`.",
                            "$ref": "#/components/schemas/RespondentResults"
                          }
                        }
                      }

                    }
                  }
                },
                "example": {
                  "success":true,
                  "message":"Respondents quality retrieved successfully",
                  "results": [
                    { 
                      "respondentId": "RESP497770",
                      "status": "JOB_COMPLETED",
                      "respondentQuality": {
                        "isExcluded": false,
                        "reasonsForExclusion": ["Open Ended Score Threshold", "Coherence Score Threshold"],
                        "redemScore": 85,
                        "dataPointsSummary": [
                          {"qualityCheck": "OES", "dataPointId": "Q1", "score": 85, "category": "Valid Answer"},
                          {"qualityCheck": "TS", "dataPointId": "durationQ1", "score": 95},
                          {"qualityCheck": "GQS", "dataPointId": "Q2", "score": 90},
                          {"qualityCheck": "OES", "dataPointId": "Q3", "score": 75, "category": "Valid Answer"},
                          {"qualityCheck": "TS", "dataPointId": "durationQ3", "score": 50},
                          {"qualityCheck": "CHS", "dataPointId": "CHS_Question", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                          {"qualityCheck": "GQS", "dataPointId": "Q4", "score": 80},
                          {"qualityCheck": "TS", "dataPointId": "totalDuration", "score": 65}
                        ],
                        "qualityScoreSummary": [
                          {"qualityCheck": "OES", "score": 80},
                          {"qualityCheck": "CHS", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                          {"qualityCheck": "GQS", "score": 85},
                          {"qualityCheck": "TS", "score": 70}
                        ]
                      }
                    },
                    { "respondentId": "RESP497771", "status": "JOB_PROCESSING" },
                    { "respondentId": "RESP497772", "status": "JOB_FAILED" }
                  ]
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/survey/add": {
      "post": {
        "tags": [
          "Survey"
        ],
        "summary": "Create a new survey",
        "operationId": "addSurvey",
        "description": "API for creating a new survey with cleaning and review settings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSurveyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Survey created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "SURVEY_CREATED"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/survey/customize/{surveyName}": {
      "post": {
        "tags": [
          "Survey"
        ],
        "summary": "Customize a survey's settings",
        "operationId": "customizeSurvey",
        "description": "API for customizing cleaning and review settings of an existing survey",
        "parameters": [
          {
            "name": "surveyName",
            "in": "path",
            "required": true,
            "description": "The name of the survey to customize",
            "schema": {
              "type": "string",
              "example": "my-survey-2024"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSurveyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Survey customized successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "SURVEY_UPDATED"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/survey/stop/{surveyName}": {
      "get": {
        "tags": [
          "Survey"
        ],
        "summary": "Stop a survey and optionally run post-checks",
        "operationId": "stopSurvey",
        "description": "API for stopping a survey. Can be triggered when the survey is completed. Optionally runs post-checks on the survey data.",
        "parameters": [
          {
            "name": "surveyName",
            "in": "path",
            "required": true,
            "description": "**The name of the survey**, which helps identify different surveys. \n\n If the survey name is not existing in the system, an error will be displayed with **Error Status 404**",
            "schema": {
              "type": "string",
              "example": "Global Vacation Insights 2024"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Survey successfully stopped",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success":{
                      "type":"boolean",
                      "description":"A variable that **indicates whether the operation was successful or not**.",
                      "enum":[true,false]
                    },
                    "message":{
                      "type":"string",
                      "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                    },
                    "results": {
                      "type": "object",
                      "description": "This object serves as a **container to hold the results for the requested data**, encapsulating all relevant information and outputs in a structured format.",
                      "properties": {
                        "status": {
                          "type": "number",
                          "example": 200
                        }
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "message": "Survey Stopped successfully",
                  "results": {
                    "status": 200
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/respondent/estimation": {
      "get": {
        "tags": [
          "Respondent"
        ],
        "summary": "Estimate the maximum number of credits needed for a respondent",
        "operationId": "estimateRespondent",
        "description": "API for estimating the maximum number of credits needed for a respondent",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EstimateRespondentRequest"
              },
              "example": {
                "OESDataPoints": 2,
                "GQSAnswers": 35,
                "TSDataPoints": 2,
                "CHSInterviews": 25
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success":{
                      "type":"boolean",
                      "description":"A variable that **indicates whether the operation was successful or not**.",
                      "enum":[true,false]
                    },
                    "message":{
                      "type":"string",
                      "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                    },
                    "results": {
                      "type": "object",
                      "description": "This object serves as a **container to hold the results for the requested data**, encapsulating all relevant information and outputs in a structured format.",
                      "properties": {
                        "estimate": {
                          "description": "This variable **represents the detailed breakdown of the number of credits** estimated for a respondent.",
                          "type": "object",
                          "properties": {
                            "totalCredits": {
                              "type": "number",
                              "description": "This variable **represents the total number of credits** estimated for a respondent."
                            },
                            "estimationBreakdown": {
                              "description": "This variable **represents the detailed breakdown of the number of credits** estimated for a respondent.",
                              "$ref": "#/components/schemas/EstimationBreakdown"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "message": "Estimate retrieved successfully",
                  "results": {
                    "estimate": {
                      "totalCredits": 12,
                      "estimationBreakdown": {
                        "OES": {"credits": 4, "dataPoints": 2},
                        "GQS": {"credits": 3, "answers": 35},
                        "TS": {"credits": 1, "dataPoints": 2},
                        "CHS": {"credits": 4, "interviews": 25}
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    }
  }
}