{
  "openapi": "3.0.1",
  "info": {
    "title": "API Documentation",
    "description": "API Documentation for Redem 3.0",
    "version": "1.0.0",
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:8000"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "InterviewQuestion": {
        "description": "Structure for interview-based questions",
        "type": "object",
        "required": [
          "questionTitle",
          "answer"
        ],
        "properties": {
          "questionTitle": {
            "type": "string",
            "description": "Title or text of the interview question",
            "example": "What is your opinion about the product?"
          },
          "answer": {
            "type": "string",
            "description": "Response provided for the interview question",
            "example": "The product quality is excellent"
          }
        }
      },
      "DataPoint": {
        "description": "Individual data point containing question response and quality check settings",
        "type": "object",
        "required": [
          "questionId",
          "qualityCheck"
        ],
        "properties": {
          "questionId": {
            "type": "string",
            "description": "Unique identifier for the question",
            "example": "Q1"
          },
          "qualityCheck": {
            "type": "string",
            "enum": [
              "OES",
              "TS",
              "GQS",
              "CHS"
            ],
            "description": "Type of quality check to perform",
            "example": "OES"
          },
          "openEndedAnswer": {
            "type": "string",
            "description": "Response text for open-ended questions",
            "example": "The service was excellent"
          },
          "title": {
            "type": "string",
            "description": "Title or text of the question",
            "example": "How would you rate our service?"
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Keywords for analyzing open-ended responses",
            "example": [
              "excellent",
              "service",
              "quality"
            ]
          },
          "isDuplicateEnabled": {
            "type": "boolean",
            "description": "Whether to check for duplicate responses",
            "example": true
          },
          "duration": {
            "type": "number",
            "description": "Time spent on question in seconds",
            "example": 45
          },
          "gridQuestions": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Array of responses for grid questions",
            "example": [
              5,
              4,
              3,
              5,
              4
            ]
          },
          "answer": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "description": "Response value for plain score questions",
            "example": 5
          },
          "interview": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterviewQuestion"
            },
            "description": "Array of interview questions and responses",
            "example": [
              {
                "questionTitle": "What did you like most?",
                "answer": "The customer service"
              }
            ]
          }
        }
      },
      "AddRespondentRequest": {
        "description": "Request body for adding a new respondent",
        "required": [
          "respondentId",
          "surveyName",
          "datapoints"
        ],
        "type": "object",
        "properties": {
          "respondentId": {
            "type": "string",
            "description": "**The unique identifier for a respondent**, making it easy to distinguish them from others in the survey.\n\n**ðŸ’¡ Important:** The system uses this ID, along with the project and survey names, to uniquely identify the respondent within a survey and project, making it possible for the same respondent to be part of different surveys and projects. \n\nIf the combination of project name, survey name, and respondent ID already exists, an error will be displayed with **Error Code 409**",
            "example": "RESP497770"
          },
          "projectName": {
            "type": "string",
            "description": "**The name of the project**, which can include multiple surveys, helping to organize and group related surveys under a single project. \n\n**ðŸ’¡Important:** If the project name already exists, the system will add the respondent under the appropriate survey within that project. If the project name is new, a new project and survey will be created, and the respondent will be added to the new survey. \n\n This field is optional â€” if no project name is provided, the system will use the survey name as the project name.",
            "example": "Global Vacation Insights 2024"
          },
          "surveyName": {
            "type": "string",
            "description": "**The name of the survey**, which helps identify different surveys within a project. \n\n**ðŸ’¡Important:** If the survey name already exists within the specified project, the respondent will be added to it. If the survey name is new but the project exists, a new survey will be created under that project, and the respondent will be added to it. If both the project and survey names are new, a new project and survey will be created, and the respondent will be added to the new survey.",
            "example": "Highlights from Your Last Vaction"
          },
          "datapoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataPoint"
            },
            "description": "Array of question responses"
          },
          "needRealtimeResponse": {
            "type": "boolean",
            "description": "**Indicates whether the response should be processed synchronously**. \n\n Set this to `true` if you need to wait for the response immediately. If you don't need to wait, set it to `false` and use the [Get Respondent Status endpoint](/api-reference/endpoint/getRespondentStatus) later to check the status of the respondent.",
            "example": true
          },
          "needDetailedResponse": {
            "type": "boolean",
            "description": "**Specifies the level of detail in the response**. Set this to `true` to receive a detailed response, or `false` for a simpler response. Refer to the response structure section later in this document for more information.",
            "example": true
          },
          "cleaningSettings": {
            "$ref": "#/components/schemas/CleaningSettings"
          },
          "reviewSettings": {
            "$ref": "#/components/schemas/CleaningSettings"
          },
          "missingValues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Values to be treated as missing",
            "example": [
              "NA",
              "N/A",
              "-"
            ]
          }
        }
      },
      "DatapointResponse": {
        "description": "Quality check results for a single datapoint",
        "type": "object",
        "properties": {
          "questionId": {
            "type": "string",
            "description": "ID of the checked question",
            "example": "Q1"
          },
          "qualityCheck": {
            "type": "string",
            "enum": [
              "OES",
              "TS",
              "GQS",
              "CHS"
            ],
            "description": "Type of quality check performed",
            "example": "OES"
          },
          "score": {
            "type": "number",
            "description": "Quality score (0-100)",
            "example": 85
          },
          "category": {
            "type": "string",
            "description": "Quality category",
            "example": "GOOD"
          },
          "reason": {
            "type": "string",
            "description": "Explanation for the score",
            "example": "Valid and detailed response"
          }
        }
      },
      "QualityCheckResponse": {
        "description": "Aggregated results for a quality check type",
        "type": "object",
        "properties": {
          "qualityCheck": {
            "type": "string",
            "enum": [
              "OES",
              "TS",
              "GQS",
              "CHS"
            ],
            "description": "Type of quality check",
            "example": "OES"
          },
          "score": {
            "type": "number",
            "description": "Aggregated score (0-100)",
            "example": 78
          }
        }
      },
      "DetailedResponse": {
        "description": "Detailed quality check results",
        "type": "object",
        "properties": {
          "datapointLevelResponse": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatapointResponse"
            },
            "description": "Individual datapoint scores"
          },
          "qualityCheckLevelResponse": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QualityCheckResponse"
            },
            "description": "Aggregated quality check scores"
          }
        }
      },
      "RespondentResults": {
        "description": "Complete results for a respondent",
        "type": "object",
        "properties": {
          "isRespondentExcluded": {
            "type": "boolean",
            "description": "Exclusion status based on quality",
            "example": false
          },
          "redemScore": {
            "type": "number",
            "description": "Overall quality score (0-100)",
            "example": 85
          },
          "detailedResponse": {
            "$ref": "#/components/schemas/DetailedResponse",
            "description": "Detailed scoring information"
          }
        }
      },
      "AddSurveyRequest": {
        "description": "Request body for creating or customizing a survey",
        "required": [
          "surveyName",
          "cleaningSettings",
          "reviewSettings"
        ],
        "type": "object",
        "properties": {
          "projectName": {
            "type": "string",
            "description": "Optional project name for grouping surveys",
            "example": "customer-satisfaction-2024"
          },
          "surveyName": {
            "type": "string",
            "description": "Unique identifier for the survey",
            "example": "customer-survey-2024"
          },
          "cleaningSettings": {
            "$ref": "#/components/schemas/CleaningSettings",
            "example": {
              "ReDemSettings": true,
              "CustomSettings": {
                "redemScore": 80,
                "qualityChecks": [
                  {
                    "type": "OES",
                    "score": 70,
                    "minimumAnswers": 5
                  }
                ]
              }
            }
          },
          "reviewSettings": {
            "$ref": "#/components/schemas/CleaningSettings",
            "example": {
              "ReDemSettings": false,
              "OESCategories": {
                "validAnswers": true,
                "genericAnswers": true,
                "noInformation": true
              }
            }
          }
        }
      },
      "CleaningSettings": {
        "description": "Configuration for data cleaning and review process",
        "type": "object",
        "properties": {
          "ReDemSettings": {
            "type": "boolean",
            "description": "Whether to use default ReDem settings",
            "example": true
          },
          "CustomSettings": {
            "type": "object",
            "description": "Custom configuration for quality checks",
            "example": {
              "redemScore": 80,
              "qualityChecks": [
                {
                  "type": "OES",
                  "score": 70,
                  "minimumAnswers": 5
                }
              ]
            },
            "properties": {
              "redemScore": {
                "type": "number",
                "description": "Minimum acceptable ReDem score (0-100)",
                "example": 80
              },
              "qualityChecks": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": [
                        "OES",
                        "TS",
                        "GQS",
                        "CHS"
                      ],
                      "example": "OES"
                    },
                    "score": {
                      "type": "number",
                      "example": 70
                    },
                    "minimumAnswers": {
                      "type": "number",
                      "example": 5
                    },
                    "minimumQuestions": {
                      "type": "number",
                      "example": 3
                    },
                    "minimumItems": {
                      "type": "number",
                      "example": 2
                    }
                  }
                }
              }
            }
          },
          "OESCategories": {
            "type": "object",
            "description": "Configuration for Open-Ended response categories",
            "example": {
              "validAnswers": true,
              "genericAnswers": true,
              "noInformation": true
            },
            "properties": {
              "validAnswers": {
                "type": "boolean",
                "example": true
              },
              "genericAnswers": {
                "type": "boolean",
                "example": true
              },
              "noInformation": {
                "type": "boolean",
                "example": true
              },
              "badLanguage": {
                "type": "boolean",
                "example": true
              },
              "nonsense": {
                "type": "boolean",
                "example": true
              },
              "duplicateAnswer": {
                "type": "boolean",
                "example": true
              },
              "duplicateRespondent": {
                "type": "boolean",
                "example": true
              },
              "wrongTopic": {
                "type": "boolean",
                "example": true
              },
              "wrongLanguage": {
                "type": "boolean",
                "example": true
              },
              "copyPastAnswer": {
                "type": "boolean",
                "example": true
              },
              "fakeAnswer": {
                "type": "boolean",
                "example": true
              }
            }
          }
        }
      }
    },
    "responses": {
      "ValidationError": {
        "description": "Validation Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "VALIDATION_ERROR"
                }
              }
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Unauthorized Access",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UNAUTHORIZED"
                }
              }
            }
          }
        }
      },
      "DuplicateError": {
        "description": "Duplicate Respondent Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "DUPLICATE_RESPONDENT"
                }
              }
            }
          }
        }
      },
      "ServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Survey",
      "description": "Survey management"
    },
    {
      "name": "Respondent",
      "description": "Respondent management"
    }
  ],
  "paths": {
    "/respondent/add": {
      "post": {
        "tags": [
          "Respondent"
        ],
        "summary": "Add a new respondent",
        "description": "API for adding a new respondent with quality check data",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRespondentRequest"
              },
              "example": {
                "respondentId": "RESP497770",
                "projectName": "Global Vacation Insights 2024",
                "surveyName": "Highlights from Your Last Vaction",
                "datapoints": [
                  {
                    "questionId": "Q1",
                    "qualityCheck": "OES",
                    "openEndedAnswer": "We were at Lake Garda in Italy",
                    "title": "Where did you spend your last vacation?",
                    "keywords": ["Beach", "Mountains", "Lake", "Museums", "Europe", "Asia", "Destination"],
                    "isDuplicateEnabled": true,
                    "isCopyPaste": false
                  },
                  {
                    "questionId": "durationQ1", 
                    "qualityCheck": "TS",
                    "duration": 42670
                  },
                  {
                    "questionId": "Q2", 
                    "qualityCheck": "GQS",
                    "gridQuestions": [7, 8, 9, 1, 3, 5, 2, 5, 9, 6] 
                  },
                  {
                    "questionId": "Q3", 
                    "qualityCheck": "OES",
                    "openEndedAnswer": "Italian cuisine, especially pizza and fine wine.",
                    "title": "What was the most memorable part of your last vacation?",
                    "keywords": ["Cuisine", "Food", "Art", "Adventure", "History", "Landscape", "Culture"],
                    "isDuplicateEnabled": true,
                    "isCopyPaste": true
                  },
                  {
                    "questionId": "durationQ3", 
                    "qualityCheck": "TS",
                    "duration": 69720
                  },
                  {
                    "questionId": "CHS_Question",
                    "qualityCheck": "CHS",
                    "interview": [
                      { "questionTitle" : "What mode of transport did you use?", "answer": "Car" },
                      { "questionTitle" : "How many days did you stay?", "answer": 5 }, 
                      { "questionTitle" : "Did you travel with family?", "answer": "yes" },
                      { "questionTitle" : "What was your approximate total budget for the trip (in EUR)?", "answer": 1500 },
                      { "questionTitle" : "What type of accommodation did you stay in?", "answer": "Hotel" }
                    ]
                  },
                  {
                    "questionId": "Q4", 
                    "qualityCheck": "GQS",
                    "gridQuestions": [2, 1, 4, 3, 5, 2, 3, 1, 1, 1] 
                  },
                  {
                    "questionId": "totalDuration", 
                    "qualityCheck": "TS",
                    "duration": 256843
                  }
                ],
                "needRealtimeResponse": true,
                "needDetailedResponse": true,
                "cleaningSettings": {
                  "ReDemSettings": false,
                  "CustomSettings": {
                    "redemScore": 60,
                    "qualityChecks": [
                      {"type": "OES", "score": 30, "minimumAnswers":2},
                      {"type": "CHS", "score": 20, "minimumQuestions":20},
                      {"type": "GQS", "score": 10, "minimumItems":15},
                      {"type": "TS", "score": 20}
                    ]
                  },
                  "OESCategories": {
                    "validAnswers": false,
                    "genericAnswers": false,
                    "noInformation": false,
                    "badLanguage": false,
                    "nonsense": false,
                    "duplicateAnswer": true,
                    "duplicateRespondent": true,
                    "wrongTopic": true,
                    "wrongLanguage": true,
                    "copyPastAnswer": true,
                    "fakeAnswer": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "description": "Detailed response (when needDetailedResponse=true and needRealtimeResponse=true)",
                      "type": "object",
                      "properties": {
                        "jobId": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "JOB_COMPLETED"
                          ]
                        },
                        "results": {
                          "$ref": "#/components/schemas/RespondentResults"
                        }
                      }
                    },
                    {
                      "description": "Simple response (when needDetailedResponse=false and needRealtimeResponse=true)",
                      "type": "object",
                      "properties": {
                        "jobId": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "JOB_COMPLETED"
                          ]
                        },
                        "results": {
                          "type": "object",
                          "properties": {
                            "isRespondentExcluded": {
                              "type": "boolean"
                            },
                            "redemScore": {
                              "type": "number"
                            }
                          }
                        }
                      }
                    },
                    {
                      "description": "Processing response (when needRealtimeResponse=false)",
                      "type": "object",
                      "properties": {
                        "jobId": {
                          "type": "string"
                        },
                        "status": {
                          "type": "string",
                          "enum": [
                            "JOB_PROCESSING"
                          ]
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Synchronously Detailed Response": {
                    "summary": "Detailed Response Example",
                    "value": {
                      "jobId": "job-497770-2024",
                      "status": "JOB_COMPLETED",
                      "results": {
                        "isRespondentExcluded": false,
                        "redemScore": 85,
                        "detailedResponse": {
                          "datapointLevelResponse": [
                            {"questionId": "Q1", "qualityCheck": "OES", "score": 85, "category": "Valid Answer", "reason": "ABC"},
                            {"questionId": "durationQ1", "qualityCheck": "TS", "score": 95},
                            {"questionId": "Q2", "qualityCheck": "GQS", "score": 90},
                            {"questionId": "Q3", "qualityCheck": "OES", "score": 75, "category": "Valid Answer", "reason": "ABC"},
                            {"questionId": "durationQ3", "qualityCheck": "TS", "score": 50},
                            {"questionId": "CHS_Question", "qualityCheck": "CHS", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                            {"questionId": "Q4", "qualityCheck": "GQS", "score": 80},
                            {"questionId": "totalDuration", "qualityCheck": "TS", "score": 65}
                          ],
                          "qualityCheckLevelResponse": [
                            {"qualityCheck": "OES", "score": 80},
                            {"qualityCheck": "CHS", "score": 75},
                            {"qualityCheck": "GQS", "score": 85},
                            {"qualityCheck": "TS", "score": 70}
                          ]
                        }
                      }
                    }
                  },
                  "Synchronously Simple Response": {
                    "summary": "Simple Response Example",
                    "value": {
                      "jobId": "job-497770-2024",
                      "status": "JOB_COMPLETED",
                      "results": {
                        "isRespondentExcluded": false,
                        "redemScore": 85
                      }
                    }
                  },
                  "Asynchronously Response": {
                    "summary": "Processing Response Example",
                    "value": {
                      "jobId": "job-497770-2024",
                      "status": "JOB_PROCESSING"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "409": {
            "$ref": "#/components/responses/DuplicateError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/respondent/status/{surveyName}/{respondentId}": {
      "get": {
        "tags": [
          "Respondent"
        ],
        "summary": "Get respondent status",
        "description": "Get the quality check status and results for a specific respondent",
        "parameters": [
          {
            "name": "surveyName",
            "in": "path",
            "required": true,
            "description": "Name of the survey to check",
            "schema": {
              "type": "string",
              "example": "customer-survey-2024"
            }
          },
          {
            "name": "respondentId",
            "in": "path",
            "required": true,
            "description": "ID of the respondent to check",
            "schema": {
              "type": "string",
              "example": "RESP-001"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RespondentResults"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/respondent/status/{surveyName}": {
      "get": {
        "tags": [
          "Respondent"
        ],
        "summary": "Get all respondents",
        "description": "Get quality check results for all respondents in a survey",
        "parameters": [
          {
            "name": "surveyName",
            "in": "path",
            "required": true,
            "description": "Name of the survey to check",
            "schema": {
              "type": "string",
              "example": "customer-survey-2024"
            }
          },
          {
            "name": "needDetailedResponse",
            "in": "query",
            "description": "Whether to include detailed scoring",
            "schema": {
              "type": "boolean",
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RespondentResults"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/survey/add": {
      "post": {
        "tags": [
          "Survey"
        ],
        "summary": "Create a new survey",
        "operationId": "addSurvey",
        "description": "API for creating a new survey with cleaning and review settings",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSurveyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Survey created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "SURVEY_CREATED"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/survey/customize/{surveyName}": {
      "post": {
        "tags": [
          "Survey"
        ],
        "summary": "Customize a survey's settings",
        "operationId": "customizeSurvey",
        "description": "API for customizing cleaning and review settings of an existing survey",
        "parameters": [
          {
            "name": "surveyName",
            "in": "path",
            "required": true,
            "description": "The name of the survey to customize",
            "schema": {
              "type": "string",
              "example": "my-survey-2024"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSurveyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Survey customized successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "SURVEY_UPDATED"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/survey/stop/{surveyName}": {
      "get": {
        "tags": [
          "Survey"
        ],
        "summary": "Stop a survey and optionally run post-checks",
        "operationId": "stopSurvey",
        "description": "API for stopping a survey. Can be triggered from ReDem App or externally. Optionally runs post-checks on the survey data.",
        "parameters": [
          {
            "name": "surveyName",
            "in": "path",
            "required": true,
            "description": "Unique identifier name of the survey to stop",
            "schema": {
              "type": "string",
              "example": "my-survey-2024"
            }
          },
          {
            "name": "runPostChecks",
            "in": "query",
            "required": false,
            "description": "Whether to run post-checks after stopping the survey",
            "schema": {
              "type": "boolean",
              "default": false,
              "example": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Survey successfully stopped",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "number",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "SURVEY_STOPPED"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/ValidationError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    }
  }
}