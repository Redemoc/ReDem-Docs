{
  "openapi": "3.0.1",
  "info": {
    "title": "API Documentation",
    "description": "API Documentation for Redem 3.0",
    "version": "1.0.0",
    "license": {
      "name": "MIT"
    }
  },
  "servers": [
    {
      "url": "https://live-api.beta.redem.io/"
    }
  ],
  "security": [
    {
      "apiKeyAuth": []
    }
  ],
  "components": {
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "api-key"
      }
    },
    "schemas": {
      "InterviewData": {
        "description": "Structure for interview-based questions",
        "type": "object",
        "required": [
          "question",
          "answer"
        ],
        "properties": {
          "question": {
            "type": "string",
            "description": "**Contains the title or text of the question**.",
            "example": "What type of accommodation did you stay in?"
          },
          "answer": {
            "oneOf": [
              {
                "type": "number"
              },
              {
                "type": "string"
              }
            ],
            "description": "A variable that holds the **respondent's answer for the question**.",
            "example": "Hotel"
          }
        }
      },
      "InteractionData": {
        "description": "Structure for interaction-based questions",
        "type": "object",
        "required": ["value", "interactionType", "timestamp"],
        "properties": {
          "value": { 
            "type": "string",
            "description": "The value of the interaction, which should include the final value once the interaction is complete."
          },
          "interactionType": { 
            "type": "string",
            "description": "The type of interaction the respondent had with the data point. \n\n â­• **Note:** Currently, the API supports `KEYSTROKE` and `COPYANDPASTE` interactions. Future updates will extend support to additional interactions, such as **mouse clicks, mouse movements**, and more.",
            "enum": ["KEYSTROKE", "COPYANDPASTE"]
          },
          "timestamp": { 
            "type": "string",
            "description": "The timestamp of the interaction. The timestamp is in the format `YYYY-MM-DDTHH:MM:SS.SSSZ`."
          }
        }
      },
      "DataPoint": {
        "description": "An array of data points that are used for quality checks for each respondent.",
        "type": "object",
        "discriminator": {
          "propertyName": "qualityCheck",
          "mapping": {
            "OES": "#/components/schemas/OESDataPoint",
            "TS": "#/components/schemas/TSDataPoint", 
            "GQS": "#/components/schemas/GQSDataPoint",
            "CHS": "#/components/schemas/CHSDataPoint",
            "BAS": "#/components/schemas/BASDataPoint"
          }
        },
        "oneOf": [
          { "$ref": "#/components/schemas/OESDataPoint" },
          { "$ref": "#/components/schemas/TSDataPoint" },
          { "$ref": "#/components/schemas/GQSDataPoint" },
          { "$ref": "#/components/schemas/CHSDataPoint" },
          { "$ref": "#/components/schemas/BASDataPoint" }
        ]
      },
      "OESDataPoint": {
        "type": "object",
        "title": "OES",
        "properties": {
          "qualityCheck": {
            "type": "string",
            "description": "A variable that **specifies the type of quality check applied to the data point**, determining how it will be assessed and evaluated.",
            "enum": ["OES"]
          },
          "dataPointId": {
            "type": "string",
            "x-mintlify-id": "oes-data-point-id",
            "description": "**A unique identifier assigned to each data point**, ensuring that every data point is distinctly tracked and referenced within the system.",
            "example": "Q1"
          },
          "question": {
            "type": "string",
            "description": "**Contains the title or text of the open-ended question**, which is used directly to evaluate respondent quality.  \n\n This variable is required only when the quality check type is set to `OES`. For all other quality check types, it will be ignored, even if provided.",
            "example": "Where did you spend your last vacation?"
          },
          "answer": {
            "type": "string",
            "description": "A variable that holds the **respondent's answer to an open-ended question**, which is the main part we use for evaluation. \n\n This variable is required only when the quality check type is set to `OES`. For all other quality check types, it will be ignored, even if provided.",
            "example": "We were at Lake Garda in Italy"
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "**Keywords are used to perform `wrong topic` checks** and help evaluate whether responses are relevant to the topic. \n\nBy default, the `wrong topic` check is disabled. However, if keywords are provided, the system will automatically enable the `wrong topic` check, and respondents will be evaluated to ensure their answers align with the context defined by the provided keywords and title. \n\n For more details on how this works, refer to the [Wrong Topic Check](/quality-checks/open-ended-score#wrong-topic) section. \n\n ðŸ§ª **Validations:**  \n - A **maximum of 10** keywords are allowed for each question.",
            "example": ["Beach", "Mountains", "Lake"]
          },
          "activateDuplicateDetection": {
            "type": "boolean",
            "description": "A variable that indicates **whether duplicate checks are performed on the respondent's answers**. \n\n This checks if an answer is identical to another respondent's answer or if a respondent provided the same answer to multiple questions. \n\n By default, duplicate checks are active, but you can deactivate them by setting this variable to `false`. \n\n For more details on how this works, refer to the [Duplicate Check](/quality-checks/open-ended-score#duplicate-respondent) section.",
            "example": true,
            "default": true
          },
          "allowedLanguages": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "**Specifies the list of languages allowed for responses**. Answers provided in languages not on this list will be marked as `wrong language`. \n\n If no languages are specified, the wrong language check will not be performed. \n\n For more details on how this works, refer to the [Wrong Language Check](/quality-checks/open-ended-score#wrong-language) section. \n\n ðŸ§ª **Validations:**  \n - Allowed languages should be represented using **two-letter ISO 639-1 language codes.**",
            "example": ["en", "de", "it"]
          }
        },
        "required": ["dataPointId", "qualityCheck", "answer", "question"]
      },
      "TSDataPoint": {
        "type": "object",
        "title": "TS",
        "properties": {
          "qualityCheck": {
            "type": "string",
            "description": "A variable that **specifies the type of quality check applied to the data point**, determining how it will be assessed and evaluated.",
            "enum": ["TS"]
          },
          "dataPointId": {
            "type": "string",
            "description": "**A unique identifier assigned to each data point**, ensuring that every data point is distinctly tracked and referenced within the system.",
            "example": "Q1"
          },
          "duration": {
            "type": "number",
            "description": "This variable contains the information about the **amount of time a respondent spends on each question or a specific section of the survey**. It helps in analyzing response behavior and timing.",
            "example": 42670
          }
        },
        "required": ["dataPointId", "qualityCheck", "duration"]
      },
      "GQSDataPoint": {
        "type": "object",
        "title": "GQS",
        "properties": {
          "qualityCheck": {
            "type": "string",
            "description": "A variable that **specifies the type of quality check applied to the data point**, determining how it will be assessed and evaluated.",
            "enum": ["GQS"]
          },
          "dataPointId": {
            "type": "string",
            "description": "**A unique identifier assigned to each data point**, ensuring that every data point is distinctly tracked and referenced within the system.",
            "example": "Q1"
          },
          "gridAnswersPattern": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "A variable that contains all the **answers provided by a specific respondent for a particular grid question**. \n\n ðŸ§ª **Validations:**  \n - A **minimum of 7** and a **maximum of 50** answers are allowed for each grid question. \n - Each answer must be provided as a **numeric value**.",
            "example": [5, 4, 3, 5, 4]
          }
        },
        "required": ["dataPointId", "qualityCheck", "gridAnswersPattern"]
      },
      "CHSDataPoint": {
        "type": "object",
        "title": "CHS",
        "properties": {
          "qualityCheck": {
            "type": "string",
            "description": "A variable that **specifies the type of quality check applied to the data point**, determining how it will be assessed and evaluated.",
            "enum": ["CHS"]
          },
          "dataPointId": {
            "type": "string",
            "description": "**A unique identifier assigned to each data point**, ensuring that every data point is distinctly tracked and referenced within the system. Note that there can be only one CHS datapoint per respondent. This datapoint should contain the entire interview.",
            "example": "Q1"
          },
          "interviewData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InterviewData"
            },
            "description": "This variable compiles all relevant questions and answer pairs used to assess whether a respondent is coherent or incoherent. \n\n ðŸ§ª **Validations:**  \n - A **maximum of 1000** interviews are allowed per respondent.",
            "example": [{
              "question": "What type of accommodation did you stay in?",
              "answer": "Hotel"
            }]
          }
        },
        "required": ["dataPointId", "qualityCheck", "interviewData"]
      },
      "BASDataPoint": {
        "type": "object",
        "title": "BAS",
        "properties": {
          "qualityCheck": {
            "type": "string",
            "description": "A variable that **specifies the type of quality check applied to the data point**, determining how it will be assessed and evaluated.",
            "enum": ["BAS"]
          },
          "dataPointId": {
            "type": "string",
            "description": "**A unique identifier assigned to each data point**, ensuring that every data point is distinctly tracked and referenced within the system.",
            "example": "Q1"
          },
          "interactionData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InteractionData"
            },
            "description": "This variable compiles all relevant information about the interaction of the respondent with the data point.",
            "example": [{
              "value": "W",
              "interactionType": "keystroke",
              "timestamp": "2024-12-01T06:22:59.833Z"
            }]
          }
        },
        "required": ["dataPointId", "qualityCheck", "interactionData"]
      },
      "AddRespondentRequest": {
        "description": "Request body for adding a new respondent",
        "required": [
          "respondentId",
          "surveyName",
          "dataPoints"
        ],
        "type": "object",
        "properties": {
          "respondentId": {
            "type": "string",
            "description": "**The unique identifier for a respondent**, making it easy to distinguish them from others in the survey.\n\n**ðŸ’¡ Important:** The system uses this ID, along with the survey name, to uniquely identify the respondent within a survey, making it possible for the same respondent to be part of different projects. \n\nIf the combination of survey name and respondent ID already exists, an error will be displayed.",
            "example": "RESP497770"
          },
          "surveyName": {
            "type": "string",
            "description": "**The name of the survery**, which helps identify different surveys. \n\n**ðŸ’¡Important:** If the survey name already exists, the system will add the respondent under the appropriate survey. If the survey name is new, a new survey will be created, and the respondent will be added to the new survey. \n\n **â­• Note:** Each survey identifier must be unique for a given user. \n\n **ðŸ”¦ Tip:** you can simply make survey name unique by adding a timestamp. \n As Example: `Global Vacation Insights - 1709040600`",
            "example": "Global Vacation Insights 2024"
          },
          "dataPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataPoint"
            },
            "description": "An array of data points that are used for quality checks for each respondent. Note that for the Coherence Score (CHS), there can only be one data point. This data point should contain the entire interview.\n\n ðŸ§ª **Validations:** \n - A **maximum of 10** `OES` data points are allowed per respondent. \n - A **maximum of 100** `TS` data points are allowed per respondent. \n - A **maximum of 20** `GQS` data points are allowed per respondent. \n - A **maximum of 1** `CHS` data point is allowed per respondent. \n\n Exceeding these limits will result in validation errors. Ensure data points per respondent stay within the limits."
          },
          "activateCleaning": {
            "type": "boolean",
            "description": "**Indicates whether cleaning should be applied to the respondent**. \n\n **ðŸ’¡Important:** To clean respondents, ensure that this variable is set to `true`. Without this setting, the system will evaluate respondents, generate scores, and always mark them as included. \n\n When cleaning is activated, the response will include a variable, isExcluded, indicating whether the respondent has been excluded based on the applied criteria.",
            "example": true,
            "default": false
          },
          "cleaningSettings": {
            "description": "**Cleaning settings for respondents** define the rules for deciding if a respondent should be excluded and marked as low quality. \n\n **ðŸ’¡Important:** If no cleaning settings are defined and cleaning is activated, the system will apply the default cleaning settings to determine whether a respondent should be excluded and marked as low quality.\n\n ðŸ§ª **Validations:** When sending cleaning settings, you must include the following object exactly as specified. Any deviation from this structure will result in a validation error. \n \n For more details on how cleaning works, refer to the [Data Cleaning](/cleaning-and-review) section.",
            "$ref": "#/components/schemas/CleaningSettings"
          },
          "synchronousResponse": {
            "type": "boolean",
            "description": "**Indicates whether the response should be processed synchronously**. \n\n Set this to `true` if you need to wait for the response immediately. If you don't need to wait, set it to `false` and use the [Get Respondent Status endpoint](/api-reference/endpoint/getRespondentStatus) later to check the status of the respondent.",
            "example": true,
            "default": true
          }
        }
      },
      "DataPointsQualityResponse": {
        "description": "Quality check results for a single datapoint",
        "type": "object",
        "properties": {
          "qualityCheck": {
            "type": "string",
            "enum": [
              "OES",
              "TS",
              "GQS",
              "CHS",
              "BAS"
            ],
            "description": "**Type of quality check** performed for the data point",
            "example": "OES"
          },
          "dataPointId": {
            "type": "string",
            "description": "**A unique identifier of the data point**",
            "example": "Q1"
          },
          "score": {
            "type": "number",
            "description": "**Quality score for the data point**, ranging from 0 to 100",
            "example": 85
          },
          "category": {
            "type": "string",
            "description": "**Quality category** for the data point, this will be only available if the quality check type is set to `OES` or `BAS`",
            "example": "Valid Answer"
          },
          "reason": {
            "type": "string",
            "description": "**Explanation** for the score, this will be only available if the quality check type is set to `CHS`",
            "example": "The user shows several inconsistencies and contradictions, such as different ..."
          }
        }
      },
      "QualityCheckResponse": {
        "description": "Aggregated results for a quality check type",
        "type": "object",
        "properties": {
          "qualityCheck": {
            "type": "string",
            "enum": [
              "OES",
              "TS",
              "GQS",
              "CHS",
              "BAS"
            ],
            "description": "**Type of quality check** performed on a respondent",
            "example": "OES"
          },
          "score": {
            "type": "number",
            "description": "A numerical **score ranging from 0 to 100** that represents the outcome of a specific quality check",
            "example": 78
          },
          "reason": {
            "type": "string",
            "description": "**Reason for the score**, this will be only available if the quality check type is set to `CHS`",
            "example": "The user shows several inconsistencies and contradictions, such as different ..."
          }
        }
      },
      "RespondentResults": {
        "description": "Complete quality assessment for a respondent",
        "type": "object",
        "properties": {
          "isExcluded": {
            "type": "boolean",
            "description": "**Indicates whether a respondent is excluded based on the cleaning settings specified in the request**. If cleaning is not activated, the respondent is always included by default.",
            "example": false
          },
          "reasonsForExclusion": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "**Reasons for exclusion** will only be available if the respondent is excluded based on the cleaning settings specified in the request. If the respondent is not excluded, the array will be empty."
          },
          "redemScore": {
            "type": "number",
            "description": "**The respondent's overall evaluation score**, ranging from 0 to 100, based on ReDem's quality checks. \n\n For more information refer to the [ReDem Score](/quality-checks/redem-score) section.",
            "example": 85
          },
          "qualityScoreSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QualityCheckResponse"
            },
            "description": "An object containing detailed results for each quality check applied"
          },
          "dataPointsSummary": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DataPointsQualityResponse"
            },
            "description": "Detailed results of quality checks performed at the individual data point level."
          }
        }
      },
      "AddSurveyRequest": {
        "description": "Request body for creating or customizing a survey",
        "required": [
          "surveyName",
          "cleaningSettings",
          "reviewSettings"
        ],
        "type": "object",
        "properties": {
          "projectName": {
            "type": "string",
            "description": "Optional survey name for grouping surveys",
            "example": "customer-satisfaction-2024"
          },
          "surveyName": {
            "type": "string",
            "description": "Unique identifier for the survey",
            "example": "customer-survey-2024"
          },
          "cleaningSettings": {
            "$ref": "#/components/schemas/CleaningSettings",
            "example": {
              "ReDemSettings": true,
              "CustomSettings": {
                "redemScore": 80,
                "qualityChecks": [
                  {
                    "type": "OES",
                    "score": 70,
                    "minimumAnswers": 5
                  }
                ]
              }
            }
          },
          "reviewSettings": {
            "$ref": "#/components/schemas/CleaningSettings",
            "example": {
              "ReDemSettings": false,
              "OESCategories": {
                "validAnswers": true,
                "genericAnswers": true,
                "noInformation": true
              }
            }
          }
        }
      },
      "CleaningSettings": {
        "description": "Configuration for data cleaning and review process",
        "type": "object",
        "properties": {
          "redemScore": {
            "type": "number",
            "description": "Minimum acceptable ReDem score (0-100)",
            "example": 80
          },
          "OES": {
            "type": "object",
            "properties": {
              "activate": {
                "type": "boolean",
                "description": "Indicates whether **OES** should be applied as a cleaning parameter.",
                "example": true
              },
              "score": {
                "type": "number",
                "description": "Minimum score threshold for OES checks",
                "example": 60
              },
              "minDataPoints": {
                "type": "number",
                "description": "Minimum number of data points required",
                "example": 2
              },
              "categories": {
                "type": "object",
                "properties": {
                  "genericAnswers": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "noInformation": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "badLanguage": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "nonsense": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "duplicateAnswer": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "duplicateRespondent": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "wrongTopic": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "wrongLanguage": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "AIGeneratedAnswer": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  }
                }
              }
            }
          },
          "CHS": {
            "type": "object",
            "properties": {
              "activate": {
                "type": "boolean",
                "description": "Indicates whether **CHS** should be applied as a cleaning parameter.",
                "example": true
              },
              "score": {
                "type": "number",
                "description": "Minimum score threshold for CHS checks",
                "example": 50
              }
            }
          },
          "GQS": {
            "type": "object",
            "properties": {
              "activate": {
                "type": "boolean",
                "description": "Indicates whether **GQS** should be applied as a cleaning parameter.",
                "example": true
              },
              "score": {
                "type": "number",
                "description": "Minimum score threshold for GQS checks",
                "example": 40
              },
              "minDataPoints": {
                "type": "number",
                "description": "Minimum number of data points required",
                "example": 2
              }
            }
          },
          "TS": {
            "type": "object",
            "properties": {
              "activate": {
                "type": "boolean",
                "description": "Indicates whether **TS** should be applied as a cleaning parameter.",
                "example": true
              },
              "score": {
                "type": "number",
                "description": "Minimum score threshold for TS checks",
                "example": 20
              }
            }
          },
          "BAS": {
            "type": "object",
            "properties": {
              "activate": {
                "type": "boolean",
                "description": "Indicates whether **BAS** should be applied as a cleaning parameter.",
                "example": true
              },
              "score": {
                "type": "number",
                "description": "Minimum score threshold for BAS checks",
                "example": 20
              },
              "categories": {
                "type": "object",
                "properties": {
                  "unnaturalTyping": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  },
                  "copyAndPaste": {
                    "type": "object",
                    "properties": {
                      "activate": { "type": "boolean" },
                      "minDataPoints": { "type": "number" }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "EstimateRespondentRequest": {
        "description": "Request body for estimating the maximum number of credits needed for a respondent",
        "required": [
          "OESDataPoints",
          "GQSAnswers",
          "TSDataPoints",
          "CHSInterviews"
        ],
        "type": "object",
        "properties": {
          "OESDataPoints": {
            "type": "number",
            "description": "**Number of OES data points** that need to consider for quality checks"
          },
          "GQSAnswers": {
            "type": "number",
            "description": "**Number of GQS answers** that need to consider for quality checks"
          },
          "TSDataPoints": {
            "type": "number",
            "description": "**Number of TS data points** that need to consider for quality checks"
          },
          "CHSInterviews": {
            "type": "number",
            "description": "**Number of CHS interviews** that need to consider for quality checks"
          }
        }
      },
      "EstimationBreakdown": {
        "description": "Detailed breakdown of the number of credits estimated for a respondent",
        "type": "object",
        "properties": {
          "OES": {
            "type": "object",
            "description": "Detailed breakdown of the number of OES credits estimated for a respondent",
            "properties": {
              "credits": {
                "type": "number",
                "description": "Number of OES credits estimated for a respondent"
              },
              "dataPoints": {
                "type": "number",
                "description": "Number of OES data points estimated for a respondent"
              }
            }
          },
          "GQS": {
            "type": "object",
            "description": "Detailed breakdown of the number of GQS credits estimated for a respondent",
            "properties": {
              "credits": {
                "type": "number",
                "description": "Number of GQS credits estimated for a respondent"
              },
              "answers": {
                "type": "number",
                "description": "Number of GQS answers estimated for a respondent"
              }
            }
          },
          "TS": {
            "type": "object",
            "description": "Detailed breakdown of the number of TS credits estimated for a respondent",
            "properties": {
              "credits": {
                "type": "number",
                "description": "Number of TS credits estimated for a respondent"
              },
              "dataPoints": {
                "type": "number",
                "description": "Number of TS data points estimated for a respondent"
              }
            }
          },
          "CHS": {
            "type": "object",
            "description": "Detailed breakdown of the number of CHS credits estimated for a respondent",
            "properties": {
              "credits": {
                "type": "number",
                "description": "Number of CHS credits estimated for a respondent"
              },
              "interviews": {
                "type": "number",
                "description": "Number of CHS interviews estimated for a respondent"
              }
            }
          }
        }
      },
      "GetRespondentRequest": {
        "description": "Request body for getting a respondent",
        "required": [
          "surveyName",
          "respondentId"
        ],
        "type": "object",
        "properties": {
          "surveyName": {
            "type": "string",
            "description": "**The name of the survery**, which helps identify different surveys.",
            "example": "Global Vacation Insights 2024"
          },
          "respondentId": {
            "type": "string",
            "description": "**The unique identifier for a respondent**, making it easy to distinguish them from others in the survey",
            "example": "RESP497770"
          }
        }
      },
      "GetAllRespondentsRequest": {
        "description": "Request body for getting all respondents",
        "required": [
          "surveyName"
        ],
        "type": "object",
        "properties": {
          "surveyName": {
            "type": "string",
            "description": "**The name of the survey**, which helps identify different surveys."
          }
        }
      }
    },
    "responses": {
      "ValidationError": {
        "description": "Validation Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "VALIDATION_ERROR"
                }
              }
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Unauthorized Access",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UNAUTHORIZED"
                }
              }
            }
          }
        }
      },
      "DuplicateError": {
        "description": "Duplicate Respondent Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "DUPLICATE_RESPONDENT"
                }
              }
            }
          }
        }
      },
      "ServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 500
                },
                "message": {
                  "type": "string",
                  "example": "INTERNAL_SERVER_ERROR"
                }
              }
            }
          }
        }
      },
      "ProjectNotFoundError": {
        "description": "Project Not Found Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "PROJECT_NOT_FOUND"
                }
              }
            }
          }
        }
      },
      "RespondentNotFoundError": {
        "description": "Respondent Not Found Error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "status": {
                  "type": "number",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "RESPONDENT_NOT_FOUND"
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Survey",
      "description": "Survey management"
    },
    {
      "name": "Respondent",
      "description": "Respondent management"
    }
  ],
  "paths": {
    "/addRespondent": {
      "post": {
        "tags": [
          "Respondent"
        ],
        "summary": "Add a new respondent",
        "description": "API for adding a new respondent with quality check data",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddRespondentRequest"
              },
              "example": {
                "respondentId": "RESP497770",
                "surveyName": "Global Vacation Insights 2024",
                "dataPoints": [
                  {
                    "qualityCheck": "OES",
                    "dataPointId": "Q1",
                    "question": "Where did you spend your last vacation?",
                    "answer": "We were at Lake Garda in Italy",
                    "keywords": ["Beach", "Mountains", "Lake", "Museums", "Europe", "Asia", "Destination"],
                    "activateDuplicateDetection": true,
                    "allowedLanguages": ["en", "de", "it"]
                  },
                  {
                    "qualityCheck": "TS",
                    "dataPointId": "durationQ1", 
                    "duration": 42670
                  },
                  {
                    "qualityCheck": "GQS",
                    "dataPointId": "Q2", 
                    "gridAnswersPattern": [7, 8, 9, 1, 3, 5, 2, 5, 9, 6] 
                  },
                  {
                    "qualityCheck": "OES",
                    "dataPointId": "Q3", 
                    "question": "What was the most memorable part of your last vacation?",
                    "answer": "Italian cuisine, especially pizza and fine wine.",
                    "keywords": ["Cuisine", "Food", "Art", "Adventure", "History", "Landscape", "Culture"],
                    "activateDuplicateDetection": true,
                    "allowedLanguages": ["en", "de", "it"]
                  },
                  {
                    "qualityCheck": "TS",
                    "dataPointId": "durationQ3", 
                    "duration": 69720
                  },
                  {
                    "qualityCheck": "CHS",
                    "dataPointId": "CHS_Question",
                    "interviewData": [
                      { "question": "What mode of transport did you use?", "answer": "Car" },
                      { "question": "How many days did you stay?", "answer": 5 }, 
                      { "question": "Did you travel with family?", "answer": "yes" },
                      { "question": "What was your approximate total budget for the trip (in EUR)?", "answer": 1500 },
                      { "question": "What type of accommodation did you stay in?", "answer": "Hotel" }
                    ]
                  },
                  {
                    "qualityCheck": "GQS",
                    "dataPointId": "Q4",
                    "gridAnswersPattern": [2, 1, 4, 3, 5, 2, 3, 1, 1, 1] 
                  },
                  {
                    "qualityCheck": "TS",
                    "dataPointId": "totalDuration",
                    "duration": 256843
                  },
                  {
                    "qualityCheck": "BAS",
                    "dataPointId": "interactionsQ1",
                    "interactionData": [
                      { "value": "W", "interactionType": "KEYSTROKE", "timestamp": "2024-12-01T06:22:59.809Z" },
                      { "value": "We", "interactionType": "KEYSTROKE", "timestamp": "2024-12-01T06:22:59.833Z" },
                      { "value": "We ", "interactionType": "KEYSTROKE", "timestamp": "2024-12-01T06:22:59.909Z" },
                      { "value": "We w", "interactionType": "KEYSTROKE", "timestamp": "2024-12-01T06:22:59.962Z" },
                      { "value": "We we", "interactionType": "KEYSTROKE", "timestamp": "2024-12-01T06:23:00.024Z" },
                      { "value": "We were", "interactionType": "KEYSTROKE", "timestamp": "2024-12-01T06:23:00.086Z" },
                      { "value": "We were ", "interactionType": "KEYSTROKE", "timestamp": "2024-12-01T06:23:00.148Z" },
                      { "value": "We were a", "interactionType": "KEYSTROKE", "timestamp": "2024-12-01T06:23:00.210Z" },
                      { "value": "We were at", "interactionType": "KEYSTROKE", "timestamp": "2024-12-01T06:23:00.272Z" }
                    ]
                  }
                ],
                "activateCleaning": true,
                "cleaningSettings": {
                  "redemScore": 60,
                  "OES": {
                    "activate": true,
                    "score": 30,
                    "minDataPoints": 2,
                    "categories": {
                      "genericAnswers": {"activate": true, "minDataPoints": 2},
                      "noInformation": {"activate": true, "minDataPoints": 2},
                      "badLanguage": {"activate": true, "minDataPoints": 2},
                      "nonsense": {"activate": true, "minDataPoints": 1},
                      "duplicateAnswer": {"activate": true, "minDataPoints": 1},
                      "duplicateRespondent": {"activate": true, "minDataPoints": 1},
                      "wrongTopic": {"activate": true, "minDataPoints": 1},
                      "wrongLanguage": {"activate": true, "minDataPoints": 1},
                      "AIGeneratedAnswer": {"activate": true, "minDataPoints": 1}
                    }
                  },
                  "CHS": {
                    "activate": true,
                    "score": 20
                  },
                  "GQS": {
                    "activate": true,
                    "score": 10,
                    "minDataPoints": 15
                  },
                  "TS": {
                    "activate": true,
                    "score": 20
                  },
                  "BAS": {
                    "activate": true,
                    "score": 10,
                    "minDataPoints": 2,
                    "categories": {
                      "unnaturalTyping": {"activate": true, "minDataPoints": 2},
                      "copyAndPaste": {"activate": true, "minDataPoints": 2}
                    }
                  }
                },
                "synchronousResponse": true
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When a request is successfully processed, the API returns a 200 OK status code along with the expected data. The structure of the response is determined by the `synchronousResponse` parameter provided in the request body.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Synchronous Response",
                      "description": "**Synchronous Response** \n\nThis response mode is triggered when `synchronousResponse` is set to `true`. \n\n In this case, the system generates a comprehensive, detailed response and processes it synchronously, meaning the request will wait (`await`) until the complete response is ready before proceeding. This ensures the delivery of in-depth information in real-time.",
                      "type": "object",
                      "properties": {
                        "success":{
                          "type":"boolean",
                          "description":"A variable that **indicates whether the operation was successful or not**.",
                          "enum":[true,false]
                        },
                        "message":{
                          "type":"string",
                          "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                        },
                        "results":{
                          "type":"object",
                          "description": "This object serves as a **container to hold the results for the requested data**, encapsulating all relevant information and outputs in a structured format.",
                          "properties":{
                            "respondentId": {
                              "type": "string",
                              "description": "A variable that **indicates the respondent**."
                            },
                            "status": {
                              "type": "string",
                              "description": "A variable that represents the current state of the respondent evaluation. For synchronous responses, this value will always be `COMPLETED`. ",
                              "enum": [
                                "COMPLETED"
                              ]
                            },
                            "respondentQuality": {
                              "$ref": "#/components/schemas/RespondentResults",
                              "description": "This variable represents **respondent data that has been evaluated according to the quality checks specified in the request**. \n\n **ðŸ’¡Important:** Even if a respondent fails evaluation, the response will still be returned with results with an error code of `-999` instead of valid scores. \n\n **â­• Note:** The value `-999` is a predefined code returned by **ReDem** whenever a respondent cannot be evaluated. This applies to all quality scores, **including ReDem Score (R-Score), OES, GQS, CHS, TS, and BAS**."
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "Asynchronous Response",
                      "description": "**Asynchronous Response** \n\nThis response mode is triggered when `synchronousResponse` is set to `false`. \n\n In this case, the system generates a detailed response and processes it asynchronously, meaning the request will not wait (`await`) for the evaluation to complete. Instead, the evaluation is performed in the background, and the status of the respondent can be retrieved later using the [Get Respondent Status](/api-reference/endpoint/getRespondentStatus) endpoint.",
                      "type": "object",
                      "properties": {
                        "success":{
                          "type":"boolean",
                          "description":"A variable that **indicates whether the operation was successful or not**.",
                          "enum":[true,false]
                        },
                        "message":{
                          "type":"string",
                          "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                        },
                        "results":{
                          "type":"object",
                          "description": "This object serves as a **container to hold the results for the requested data**, encapsulating all relevant information and outputs in a structured format.",
                          "properties":{
                            "respondentId": {
                              "type": "string",
                              "description": "A variable that **indicates the respondent**."
                            },
                            "status": {
                              "type": "string",
                              "description": "A variable that represents the **current state of the respondent evaluation**.",
                              "enum": [
                                "QUEUED"
                              ]
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Synchronous Response": {
                    "summary": "Synchronous Response Example",
                    "value": {
                      "success":true,
                      "message":"Respondent Evaluated successfully",
                      "results":{
                        "respondentId": "RESP497770",
                        "status": "COMPLETED",
                        "respondentQuality": {
                          "isExcluded": true,
                          "reasonsForExclusion": ["Open Ended Score Threshold", "Coherence Score Threshold"],
                          "redemScore": 85,
                          "qualityScoreSummary": [
                            {"qualityCheck": "OES", "score": 80},
                            {"qualityCheck": "CHS", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                            {"qualityCheck": "GQS", "score": 85},
                            {"qualityCheck": "TS", "score": 70},
                            {"qualityCheck": "BAS", "score": 75}
                          ],
                          "dataPointsSummary": [
                            {"qualityCheck": "OES", "dataPointId": "Q1", "score": 85, "category": "Valid Answer"},
                            {"qualityCheck": "TS", "dataPointId": "durationQ1", "score": 95},
                            {"qualityCheck": "GQS", "dataPointId": "Q2", "score": 90},
                            {"qualityCheck": "OES", "dataPointId": "Q3", "score": 75, "category": "Valid Answer"},
                            {"qualityCheck": "TS", "dataPointId": "durationQ3", "score": 50},
                            {"qualityCheck": "CHS", "dataPointId": "CHS_Question", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                            {"qualityCheck": "GQS", "dataPointId": "Q4", "score": 80},
                            {"qualityCheck": "TS", "dataPointId": "totalDuration", "score": 65},
                            {"qualityCheck": "BAS", "dataPointId": "interactionsQ1", "score": 75, "category": "Natural Typing"}
                          ]
                        }
                      }
                    }
                  },
                  "Asynchronously Response": {
                    "summary": "Asynchronous Response Example",
                    "value": {
                      "success":true,
                      "message":"Respondent Queued for Evaluation",
                      "results":{
                        "respondentId": "RESP497770",
                        "status": "QUEUED"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "When a request fails due to invalid input or other errors, the API returns a 400 Bad Request status code. The response includes a descriptive `message` explaining the issue and an `error` object containing additional details to aid in diagnosing and resolving the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Validation Error",
                      "description": "Indicating a validation failure, the response includes a `message` field specifying the issue and an `errors` object listing the missing or incorrect fields to help clients resolve them. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.", 
                      "type": "object"
                    },
                    {
                      "title": "ID already exists",
                      "description": "If the system detects a duplicate `respondentId` within the same survey, it returns an error. The `respondentId` serves as a unique identifier for each respondent within a survey, ensuring they are distinguishable. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    },
                    {
                      "title": "Survey has been stopped",
                      "description": "If a respondent addition request is made for a survey that is **stopped**, the system returns an error. A **stopped** survey no longer accepts new respondents, preventing further additions. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    },
                    {
                      "title": "Insufficient credit balance",
                      "description": "If there are **not enough credits available to add a respondent**, the system returns an error. Adding respondents requires sufficient credits, and if the limit is reached, no further respondents can be added. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    },
                    {
                      "title": "Respondent processing timed out",
                      "description": "If processing a respondent **exceeds 20 seconds**, the system returns an error. If the processing time surpasses this threshold, the request continues in the background, but an error response is returned. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Validation Error": {
                    "value": {
                      "success":false,
                      "message":"Validation Error",
                      "errors":{
                        "0": "\"surveyName\" is required",
                        "1": "\"dataPoints[0].dataPointId\" is required"
                      }
                    }
                  },
                  "ID already exists": {
                    "value": {
                      "success":false,
                      "message":"ID already exists",
                      "errors":{}
                    }
                  },
                  "Survey has been stopped": {
                    "value": {
                      "success":false,
                      "message":"Survey has been stopped",
                      "errors":{}
                    }
                  },
                  "Insufficient credit balance": {
                    "value": {
                      "success":false,
                      "message":"Insufficient credit balance",
                      "errors":{}
                    }
                  },
                  "Respondent processing timed out": {
                    "value": {
                      "success": false,
                      "message":"Respondent processing timed out",
                      "errors":{}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/getRespondent": {
      "post": {
        "tags": [
          "Respondent"
        ],
        "summary": "Get respondent results",
        "description": "Get the quality check results and status for a specific respondent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetRespondentRequest"
              },
              "example": {
                "surveyName": "Global Vacation Insights 2024",
                "respondentId": "RESP497770"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When a request is successfully processed, the API responds with a `200 OK` status code and the expected data. The structure of the response varies based on the respondent's status.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Respondet Completed",
                      "description": "This response mode available when respondent status is `COMPLETED`. \n\n In this case, the system generates a comprehensive, quality assessment of the respondent.",
                      "type": "object",
                      "properties": {
                        "success":{
                          "type":"boolean",
                          "description":"A variable that **indicates whether the operation was successful or not**.",
                          "enum":[true,false]
                        },
                        "message":{
                          "type":"string",
                          "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                        },
                        "results": {
                          "type": "object",
                          "description": "This object serves as a **container to hold the results for the requested data**, encapsulating all relevant information and outputs in a structured format.",
                          "properties": {
                            "respondentId": {
                              "type": "string",
                              "description": "A variable that **indicates the respondent**."
                            },
                            "status": {
                              "type": "string",
                              "description": "A variable that represents the **current state of the respondent evaluation**. For respondents who have been successfully evaluated, this value will always be `COMPLETED`."
                            },
                            "respondentQuality": {
                              "description": "This variable **represents respondent data that has been evaluated based on the quality checks specified in the /addRespondent request**. \n\n ðŸ’¡Important: Even if a respondent fails evaluation, the response will still be returned with results with an error code of -999 instead of valid scores. \n\n **â­• Note:** The value -999 is a predefined code returned by ReDem whenever a respondent cannot be evaluated. This applies to all quality scores, including ReDem Score (R-Score), OES, GQS, CHS, TS, and BAS.",
                              "$ref": "#/components/schemas/RespondentResults"
                            }
                          }
                        }
                      }
                    },
                    {
                      "title": "Respondent Processing",
                      "description": "This response mode available when respondent status is `QUEUED`. \n\n In this case, the system will only return the status of the respondent, without the quality assessment of the respondent.",
                      "type": "object",
                      "properties": {
                        "success":{
                          "type":"boolean",
                          "description":"A variable that **indicates whether the operation was successful or not**.",
                          "enum":[true,false]
                        },
                        "message":{
                          "type":"string",
                          "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                        },
                        "results": {
                          "type": "object",
                          "description": "This object serves as a **container to hold the results for the requested data**, encapsulating all relevant information and outputs in a structured format.",
                          "properties": {
                            "respondentId": {
                              "type": "string",
                              "description": "A variable that **indicates the respondent**."
                            },
                            "status": {
                              "type": "string",
                              "description": "A variable that represents the **current state of the respondent evaluation**. For respondents who are still being processed, this value will always be `QUEUED`."
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Respondent Completed": {
                    "summary": "Respondent Completed Example",
                    "value": {
                      "success":true,
                      "message":"Respondent quality successfully retrieved",
                      "results": {
                        "respondentId": "RESP497770",
                        "status": "COMPLETED",
                        "respondentQuality": {
                          "isExcluded": true,
                          "reasonsForExclusion": ["Open Ended Score Threshold", "Coherence Score Threshold"],
                          "redemScore": 85,
                          "qualityScoreSummary": [
                            {"qualityCheck": "OES", "score": 80},
                            {"qualityCheck": "CHS", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                            {"qualityCheck": "GQS", "score": 85},
                            {"qualityCheck": "TS", "score": 70},
                            {"qualityCheck": "BAS", "score": 75}
                          ],
                          "dataPointsSummary": [
                            {"qualityCheck": "OES", "dataPointId": "Q1", "score": 85, "category": "Valid Answer"},
                            {"qualityCheck": "TS", "dataPointId": "durationQ1", "score": 95},
                            {"qualityCheck": "GQS", "dataPointId": "Q2", "score": 90},
                            {"qualityCheck": "OES", "dataPointId": "Q3", "score": 75, "category": "Valid Answer"},
                            {"qualityCheck": "TS", "dataPointId": "durationQ3", "score": 50},
                            {"qualityCheck": "CHS", "dataPointId": "CHS_Question", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                            {"qualityCheck": "GQS", "dataPointId": "Q4", "score": 80},
                            {"qualityCheck": "TS", "dataPointId": "totalDuration", "score": 65},
                            {"qualityCheck": "BAS", "dataPointId": "interactionsQ1", "score": 75, "category": "Natural Typing"}
                          ]
                        }
                      }
                    }
                  },
                  "Respondent Processing": {
                    "summary": "Respondent Processing Example",
                    "value": {
                      "success":true,
                      "message":"Respondent quality successfully retrieved",
                      "results":{
                        "respondentId": "RESP497770",
                        "status": "QUEUED"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "When a request fails due to invalid input or other errors, the API returns a 400 Bad Request status code. The response includes a descriptive `message` explaining the issue and an `error` object containing additional details to aid in diagnosing and resolving the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Validation Error",
                      "description": "Indicating a validation failure, the response includes a `message` field specifying the issue and an `errors` object listing the missing or incorrect fields to help clients resolve them. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.", 
                      "type": "object"
                    },
                    {
                      "title": "Survey not found",
                      "description": "This error occurs when the **requested survey does not exist in the system**. It may happen if the survey name is incorrect, has been deleted, or was never created. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    },
                    {
                      "title": "Respondent not found",
                      "description": "This error occurs when the **requested respondentId does not exist in the system**. It may happen if the respondent has not been added to the specified survey or if an incorrect ID was provided. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Validation Error": {
                    "value": {
                      "success":false,
                      "message":"Validation Error",
                      "errors":{
                        "0": "\"surveyName\" is required",
                        "1": "\"respondentId\" is required"
                      }
                    }
                  },
                  "Survey not found": {
                    "value": {
                      "success":false,
                      "message":"Survey not found",
                      "errors":{}
                    }
                  },
                  "Respondent not found": {
                    "value": {
                      "success":false,
                      "message":"Respondent not found",
                      "errors":{}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/getAllRespondents": {
      "post": {
        "tags": [
          "Respondent"
        ],
        "summary": "Get all respondents",
        "description": "Get quality check results and status for all respondents in a specific survey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllRespondentsRequest"
              },
              "example": {
                "surveyName": "Global Vacation Insights 2024"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When a request is successfully processed, the API responds with a `200 OK` status code and the expected data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success":{
                      "type":"boolean",
                      "description":"A variable that **indicates whether the operation was successful or not**.",
                      "enum":[true,false]
                    },
                    "message":{
                      "type":"string",
                      "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                    },
                    "results": {
                      "type": "array",
                      "description": "This is an array of objects, **each representing a respondent in the survey**.",
                      "items": {
                        "type": "object",
                        "properties": {
                          "respondentId": {
                            "type": "string",
                            "description": "**The unique identifier for a respondent**, making it easy to distinguish them from others in the survey.",
                            "example": "RESP497770"
                          },
                          "status": {
                            "type": "string",
                            "description": "A variable that **indicates the current state of the respondent**. \n\n **ðŸ’¡Important:** Even if a respondent fails evaluation, the response status will still be `COMPLETED`. \n\n **â­• Note:** The value -999 is a predefined code returned by ReDem whenever a respondent cannot be evaluated. This applies to all quality scores, including ReDem Score (R-Score), OES, GQS, CHS, TS, and BAS.",
                            "enum": ["COMPLETED", "QUEUED"]
                          },
                          "respondentQuality": {
                            "description": "This variable **represents respondent data that has been evaluated according to the quality checks specified in the /addRespondent request**. \n\n **â­• Note:** this variable will only available if the respondent status is `COMPLETED`.",
                            "$ref": "#/components/schemas/RespondentResults"
                          }
                        }
                      }

                    }
                  }
                },
                "example": {
                  "success":true,
                  "message":"Respondents quality retrieved successfully",
                  "results": [
                    { 
                      "respondentId": "RESP497770",
                      "status": "JOB_COMPLETED",
                      "respondentQuality": {
                        "isExcluded": false,
                        "reasonsForExclusion": ["Open Ended Score Threshold", "Coherence Score Threshold"],
                        "redemScore": 85,
                        "dataPointsSummary": [
                          {"qualityCheck": "OES", "dataPointId": "Q1", "score": 85, "category": "Valid Answer"},
                          {"qualityCheck": "TS", "dataPointId": "durationQ1", "score": 95},
                          {"qualityCheck": "GQS", "dataPointId": "Q2", "score": 90},
                          {"qualityCheck": "OES", "dataPointId": "Q3", "score": 75, "category": "Valid Answer"},
                          {"qualityCheck": "TS", "dataPointId": "durationQ3", "score": 50},
                          {"qualityCheck": "CHS", "dataPointId": "CHS_Question", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                          {"qualityCheck": "GQS", "dataPointId": "Q4", "score": 80},
                          {"qualityCheck": "TS", "dataPointId": "totalDuration", "score": 65}
                        ],
                        "qualityScoreSummary": [
                          {"qualityCheck": "OES", "score": 80},
                          {"qualityCheck": "CHS", "score": 75, "reason": "The user shows several inconsistencies and contradictions, such as different ..."},
                          {"qualityCheck": "GQS", "score": 85},
                          {"qualityCheck": "TS", "score": 70}
                        ]
                      }
                    },
                    { "respondentId": "RESP497771", "status": "JOB_PROCESSING" },
                    { "respondentId": "RESP497772", "status": "JOB_FAILED" }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "When a request fails due to invalid input or other errors, the API returns a 400 Bad Request status code. The response includes a descriptive `message` explaining the issue and an `error` object containing additional details to aid in diagnosing and resolving the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Validation Error",
                      "description": "Indicating a validation failure, the response includes a `message` field specifying the issue and an `errors` object listing the missing or incorrect fields to help clients resolve them. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.", 
                      "type": "object"
                    },
                    {
                      "title": "Survey not found",
                      "description": "This error occurs when the **requested survey does not exist in the system**. It may happen if the survey name is incorrect, has been deleted, or was never created. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Validation Error": {
                    "value": {
                      "success":false,
                      "message":"Validation Error",
                      "errors":{
                        "0": "\"surveyName\" is required"
                      }
                    }
                  },
                  "Survey not found": {
                    "value": {
                      "success":false,
                      "message":"Survey not found",
                      "errors":{}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/stopSurvey": {
      "post": {
        "tags": [
          "Survey"
        ],
        "summary": "Stop a survey",
        "operationId": "stopSurvey",
        "description": "API for stopping a survey. Can be triggered when the survey is completed. A **stopped survey no longer accepts new respondents**, preventing further additions.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAllRespondentsRequest"
              },
              "example": {
                "surveyName": "Global Vacation Insights 2024"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "When a request is successfully processed, the API returns a 200 OK status code along with the expected data.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success":{
                      "type":"boolean",
                      "description":"A variable that **indicates whether the operation was successful or not**.",
                      "enum":[true,false]
                    },
                    "message":{
                      "type":"string",
                      "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                    }
                  }
                },
                "example": {
                  "success": true,
                  "message": "Survey successfully stopped"
                }
              }
            }
          },
          "400": {
            "description": "When a request fails due to invalid input or other errors, the API returns a 400 Bad Request status code. The response includes a descriptive `message` explaining the issue and an `error` object containing additional details to aid in diagnosing and resolving the problem.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "title": "Validation Error",
                      "description": "Indicating a validation failure, the response includes a `message` field specifying the issue and an `errors` object listing the missing or incorrect fields to help clients resolve them. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.", 
                      "type": "object"
                    },
                    {
                      "title": "Survey not found",
                      "description": "This error occurs when the **requested survey does not exist in the system**. It may happen if the survey name is incorrect, has been deleted, or was never created. \n\n **â­• Note:** Refer to the [response structure](/api-reference/api-specifications/response-structure) for the format of the error response.",
                      "type": "object"
                    }
                  ]
                },
                "examples": {
                  "Validation Error": {
                    "value": {
                      "success":false,
                      "message":"Validation Error",
                      "errors":{
                        "0": "\"surveyName\" is required"
                      }
                    }
                  },
                  "Survey not found": {
                    "value": {
                      "success":false,
                      "message":"Survey not found",
                      "errors":{}
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/respondent/estimation": {
      "get": {
        "tags": [
          "Respondent"
        ],
        "summary": "Estimate the maximum number of credits needed for a respondent",
        "operationId": "estimateRespondent",
        "description": "API for estimating the maximum number of credits needed for a respondent",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EstimateRespondentRequest"
              },
              "example": {
                "OESDataPoints": 2,
                "GQSAnswers": 35,
                "TSDataPoints": 2,
                "CHSInterviews": 25
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success":{
                      "type":"boolean",
                      "description":"A variable that **indicates whether the operation was successful or not**.",
                      "enum":[true,false]
                    },
                    "message":{
                      "type":"string",
                      "description":"A variable that **human-readable message** providing additional context or confirmation of the requested action."
                    },
                    "results": {
                      "type": "object",
                      "description": "This object serves as a **container to hold the results for the requested data**, encapsulating all relevant information and outputs in a structured format.",
                      "properties": {
                        "estimate": {
                          "description": "This variable **represents the detailed breakdown of the number of credits** estimated for a respondent.",
                          "type": "object",
                          "properties": {
                            "totalCredits": {
                              "type": "number",
                              "description": "This variable **represents the total number of credits** estimated for a respondent."
                            },
                            "estimationBreakdown": {
                              "description": "This variable **represents the detailed breakdown of the number of credits** estimated for a respondent.",
                              "$ref": "#/components/schemas/EstimationBreakdown"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "success": true,
                  "message": "Estimate retrieved successfully",
                  "results": {
                    "estimate": {
                      "totalCredits": 12,
                      "estimationBreakdown": {
                        "OES": {"credits": 4, "dataPoints": 2},
                        "GQS": {"credits": 3, "answers": 35},
                        "TS": {"credits": 1, "dataPoints": 2},
                        "CHS": {"credits": 4, "interviews": 25}
                      }
                    }
                  }
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    }
  }
}